{"meta":{"title":"洪卫的博客","subtitle":"洪卫的博客","description":"电子科技大学 | 电子与通信工程 | 计算机视觉","author":"洪卫","url":"https://sunhwee.github.io"},"pages":[{"title":"about","date":"2019-08-20T14:14:36.000Z","updated":"2019-08-21T08:29:14.743Z","comments":false,"path":"about/index.html","permalink":"https://sunhwee.github.io/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2019-08-20T15:13:35.000Z","updated":"2019-08-21T08:28:55.151Z","comments":false,"path":"client/index.html","permalink":"https://sunhwee.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-08-20T13:32:48.000Z","updated":"2019-08-21T08:29:01.895Z","comments":false,"path":"bangumi/index.html","permalink":"https://sunhwee.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2019-08-20T15:13:48.000Z","updated":"2019-08-21T08:28:41.384Z","comments":true,"path":"comment/index.html","permalink":"https://sunhwee.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2019-08-20T15:13:05.000Z","updated":"2019-08-21T08:28:35.196Z","comments":false,"path":"donate/index.html","permalink":"https://sunhwee.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2019-08-20T15:11:06.000Z","updated":"2019-08-21T08:28:18.244Z","comments":true,"path":"links/index.html","permalink":"https://sunhwee.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"lab","date":"2019-08-20T13:47:59.000Z","updated":"2019-08-21T08:28:25.020Z","comments":false,"path":"lab/index.html","permalink":"https://sunhwee.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2019-08-20T15:14:28.000Z","updated":"2019-08-21T08:28:13.428Z","comments":false,"path":"music/index.html","permalink":"https://sunhwee.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2019-08-20T15:09:03.000Z","updated":"2019-08-21T08:27:42.316Z","comments":true,"path":"rss/index.html","permalink":"https://sunhwee.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-20T14:14:16.000Z","updated":"2019-08-21T08:27:55.992Z","comments":true,"path":"tags/index.html","permalink":"https://sunhwee.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-08-11T13:52:46.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://sunhwee.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-08-11T13:52:46.000Z","comments":false,"path":"video/index.html","permalink":"https://sunhwee.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"PicGo+GitHub：你的最佳免费图床选择！","slug":"PicGo-GitHub-PicBed","date":"2019-08-18T12:54:45.000Z","updated":"2019-08-21T11:25:04.588Z","comments":true,"path":"2019/08/18/PicGo-GitHub-PicBed/","link":"","permalink":"https://sunhwee.github.io/2019/08/18/PicGo-GitHub-PicBed/","excerpt":"","text":"PicGo介绍 这是一款图片上传的工具，目前支持SM.MS图床，微博图床，七牛图床，腾讯云COS，阿里云OSS，Imgur，又拍云，GitHub等图床，未来将支持更多图床。 所以解决问题的思路就是，将本地的文件，或者剪切板上面的截图发送图床，然后生成在线图片的链接，这样就可以让Markdown文档飞起来了，走到哪就可以用到哪😊。 在众多的图床中，我选择的GitHub图床，其它类型的图床如果你们有兴趣的话可以试一下。 创建自己的GitHub图床 1. 创建GitHub图床之前，需要注册/登陆GitHub账号 申请GitHub账号很简单，我就不演示了 2. 创建Repository 点击&quot;New repository&quot;按钮 最后12345步骤执行就行了 第4步，为repository初始化一个README.md文件可以根据需求选择，非必选 3. 生成一个Token用于操作GitHub repository 回到主页，点击&quot;Settings&quot;按钮 进入页面后，点击&quot;Developer settings&quot;按钮 点击&quot;Personal access tokens&quot;按钮 创建新的Token 填写描述，选择&quot;repo&quot;权限，然后点击&quot;Generate token&quot;按钮 注：创建成功后，会生成一串token，这串token之后不会再显示，所以第一次看到的时候，可以建个文本文件好好保存，忘记了只有重新生成，每次都不一样。 配置PicGo 1. 下载运行PicGo 点击此处下载应用。 macOS用户请下载最新版本的dmg文件，windows用户请下载最新版本的exe文件，linux用户请下载AppImage文件。 AppImage文件如何使用？&gt;&gt;&gt;&gt;传送门 2. 配置图床 之后按照这个配置格式配置即可！ 设定仓库名的时候，是按照“账户名/仓库名的格式填写” 分支名统一填写“master” 将之前的Token黏贴在这里 存储的路径可以按照我这样子写，就会在repository下创建一个“xxx/xxx/xxxxx/”文件夹，当然你可以自己定义你的文件夹名字。 自定义域名的作用是在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上https://raw.githubusercontent.com/用户名/RepositoryName/分支名，自定义域名需要按照这样去填写 3. 快捷键及相关配置 支持快捷键command+shift+p（macOS）或者control+shift+p（windows\\linux）用以支持快捷上传剪贴板里的图片（第一张）。 PicGo支持自定义快捷键，使用方法见配置手册。 注：可以将快捷键设置为ctrl+shift+c 4. 其他相关 vs-picgo：picgo的VSCode版。 总结将上面的步骤都设置好之后，就可以让自己的Markdown文档飞起来了，每次截图之后，都可以按一下ctrl+shift+c，这样就会将剪切板上面的截图转化为在线网络图片链接，简直就是爽的不要不要的！！ 应用开发进度可以查看Projects，会同步更新开发进度。 如果第一次使用，请参考应用使用快速上手。遇到问题了还可以看看FAQ以及被关闭的issues。","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"https://sunhwee.github.io/tags/PicGo/"},{"name":"Github","slug":"Github","permalink":"https://sunhwee.github.io/tags/Github/"},{"name":"图床","slug":"图床","permalink":"https://sunhwee.github.io/tags/图床/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://sunhwee.github.io/tags/Tutorial/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"Markdown Emoji表情语法速查表","slug":"emoji-cheat-sheet","date":"2019-08-16T10:50:36.000Z","updated":"2019-08-21T11:24:51.400Z","comments":true,"path":"2019/08/16/emoji-cheat-sheet/","link":"","permalink":"https://sunhwee.github.io/2019/08/16/emoji-cheat-sheet/","excerpt":"","text":"[这也是一测试]： :laughing: :blush: :smiley: :rofl: :yum: :heart_eyes: :sweat_smile: :sunglasses: :stuck_out_tongue_winking_eye: :satisfied: emoji-cheat-sheet 这是一篇关于markdown中快速插入Emoji表情的语法速查表，以后写markdown想要插入emoji表情忘记语法了，可以快速查看，挺方便的。This cheat sheet is automatically generated from GitHub Emoji API and Emoji Cheat Sheet. Table of Contents emoji-cheat-sheet Table of Contents People Nature Objects Places Symbols Uncategorized People ico emoji ico emoji :rofl: :rofl: :smile: :smile: :laughing: :laughing: :blush: :blush: :smiley: :smiley: :relaxed: :relaxed: :smirk: :smirk: :heart_eyes: :heart_eyes: :kissing_heart: :kissing_heart: :kissing_closed_eyes: :kissing_closed_eyes: :flushed: :flushed: :relieved: :relieved: :roll_eyes: :roll_eyes: :upside_down_face: :upside_down_face: :satisfied: :satisfied: :grin: :grin: :wink: :wink: :stuck_out_tongue_winking_eye: :stuck_out_tongue_winking_eye: :stuck_out_tongue_closed_eyes: :stuck_out_tongue_closed_eyes: :grinning: :grinning: :slightly_frowning_face: :slightly_frowning_face: :slightly_smiling_face: :slightly_smiling_face: :kissing: :kissing: :kissing_smiling_eyes: :kissing_smiling_eyes: :stuck_out_tongue: :stuck_out_tongue: :sleeping: :sleeping: :worried: :worried: :frowning: :frowning: :anguished: :anguished: :open_mouth: :open_mouth: :grimacing: :grimacing: :confused: :confused: :hushed: :hushed: :expressionless: :expressionless: :unamused: :unamused: :sweat_smile: :sweat_smile: :sweat: :sweat: :disappointed_relieved: :disappointed_relieved: :weary: :weary: :pensive: :pensive: :disappointed: :disappointed: :confounded: :confounded: :fearful: :fearful: :cold_sweat: :cold_sweat: :persevere: :persevere: :cry: :cry: :sob: :sob: :joy: :joy: :astonished: :astonished: :scream: :scream: :neckbeard: :neckbeard: :tired_face: :tired_face: :angry: :angry: :rage: :rage: :thinking: | :thinking: | :zipper_mouth_face: | :zipper_mouth_face: || :triumph: | :triumph: | :sleepy: | :sleepy: || :yum: | :yum: | :mask: | :mask: || :sunglasses: | :sunglasses: | :dizzy_face: | :dizzy_face: || :imp: | :imp: | :smiling_imp: | :smiling_imp: || :neutral_face: | :neutral_face: | :no_mouth: | :no_mouth: || :innocent: | :innocent: | :alien: | :alien: || :yellow_heart: | :yellow_heart: | :blue_heart: | :blue_heart: || :purple_heart: | :purple_heart: | :heart: | :heart: || :green_heart: | :green_heart: | :broken_heart: | :broken_heart: || :heartbeat: | :heartbeat: | :heartpulse: | :heartpulse: || :two_hearts: | :two_hearts: | :revolving_hearts: | :revolving_hearts: || :cupid: | :cupid: | :sparkling_heart: | :sparkling_heart: || :sparkles: | :sparkles: | :star: | :star: || :star2: | :star2: | :dizzy: | :dizzy: || :boom: | :boom: | :collision: | :collision: || :anger: | :anger: | :exclamation: | :exclamation: || :question: | :question: | :grey_exclamation: | :grey_exclamation: || :grey_question: | :grey_question: | :zzz: | :zzz: || :dash: | :dash: | :sweat_drops: | :sweat_drops: || :notes: | :notes: | :musical_note: | :musical_note: || :fire: | :fire: | :hankey: | :hankey: || :poop: | :poop: | :shit: | :shit: || :+1: | :+1: | :thumbsup: | :thumbsup: || :-1: | :-1: | :thumbsdown: | :thumbsdown: || :ok_hand: | :ok_hand: | :punch: | :punch: || :facepunch: | :facepunch: | :fist: | :fist: || :v: | :v: | :wave: | :wave: || :hand: | :hand: | :raised_hand: | :raised_hand: || :open_hands: | :open_hands: | :point_up: | :point_up: || :point_down: | :point_down: | :point_left: | :point_left: || :point_right: | :point_right: | :raised_hands: | :raised_hands: || :pray: | :pray: | :point_up_2: | :point_up_2: || :clap: | :clap: | :muscle: | :muscle: || :metal: | :metal: | :fu: | :fu: || :runner: | :runner: | :running: | :running: || :couple: | :couple: | :family: | :family: || :two_men_holding_hands: | :two_men_holding_hands: | :two_women_holding_hands: | :two_women_holding_hands: || :dancer: | :dancer: | :dancers: | :dancers: || :ok_woman: | :ok_woman: | :no_good: | :no_good: || :information_desk_person: | :information_desk_person: | :raising_hand: | :raising_hand: || :bride_with_veil: | :bride_with_veil: | :person_with_pouting_face: | :person_with_pouting_face: || :person_frowning: | :person_frowning: | :bow: | :bow: || :couple_with_heart: | :couple_with_heart: | :massage: | :massage: || :haircut: | :haircut: | :nail_care: | :nail_care: || :boy: | :boy: | :girl: | :girl: || :woman: | :woman: | :man: | :man: || :baby: | :baby: | :older_woman: | :older_woman: || :older_man: | :older_man: | :person_with_blond_hair: | :person_with_blond_hair: || :man_with_gua_pi_mao: | :man_with_gua_pi_mao: | :man_with_turban: | :man_with_turban: || :construction_worker: | :construction_worker: | :cop: | :cop: || :angel: | :angel: | :princess: | :princess: || :smiley_cat: | :smiley_cat: | :smile_cat: | :smile_cat: || :heart_eyes_cat: | :heart_eyes_cat: | :kissing_cat: | :kissing_cat: || :smirk_cat: | :smirk_cat: | :scream_cat: | :scream_cat: || :crying_cat_face: | :crying_cat_face: | :joy_cat: | :joy_cat: || :pouting_cat: | :pouting_cat: | :japanese_ogre: | :japanese_ogre: || :japanese_goblin: | :japanese_goblin: | :see_no_evil: | :see_no_evil: || :hear_no_evil: | :hear_no_evil: | :speak_no_evil: | :speak_no_evil: || :guardsman: | :guardsman: | :skull: | :skull: || :feet: | :feet: | :lips: | :lips: || :kiss: | :kiss: | :droplet: | :droplet: || :ear: | :ear: | :eyes: | :eyes: || :nose: | :nose: | :tongue: | :tongue: || :love_letter: | :love_letter: | :bust_in_silhouette: | :bust_in_silhouette: || :busts_in_silhouette: | :busts_in_silhouette: | :speech_balloon: | :speech_balloon: || :thought_balloon: | :thought_balloon: | | :feelsgood: || :finnadie: | :finnadie: | :goberserk: | :goberserk: || :godmode: | :godmode: | :hurtrealbad: | :hurtrealbad: || :rage1: | :rage1: | :rage2: | :rage2: || :rage3: | :rage3: | :rage4: | :rage4: || :suspect: | :suspect: | :trollface: | :trollface: | Nature ico emoji ico emoji :sunny: :sunny: :umbrella: :umbrella: :cloud: :cloud: :snowflake: :snowflake: :snowman: :snowman: :zap: :zap: :cyclone: :cyclone: :foggy: :foggy: :ocean: :ocean: :cat: :cat: :dog: :dog: :mouse: :mouse: :hamster: :hamster: :rabbit: :rabbit: :wolf: :wolf: :frog: :frog: :tiger: :tiger: :koala: :koala: :bear: :bear: :pig: :pig: :pig_nose: :pig_nose: :cow: :cow: :boar: :boar: :monkey_face: :monkey_face: :monkey: :monkey: :horse: :horse: :racehorse: :racehorse: :camel: :camel: :sheep: :sheep: :elephant: :elephant: :panda_face: :panda_face: :snake: :snake: :bird: :bird: :baby_chick: :baby_chick: :hatched_chick: :hatched_chick: :hatching_chick: :hatching_chick: :chicken: :chicken: :penguin: :penguin: :turtle: :turtle: :bug: :bug: :honeybee: :honeybee: :ant: :ant: :beetle: :beetle: :snail: :snail: :octopus: :octopus: :tropical_fish: :tropical_fish: :fish: :fish: :whale: :whale: :whale2: :whale2: :dolphin: :dolphin: :cow2: :cow2: :ram: :ram: :rat: :rat: :water_buffalo: :water_buffalo: :tiger2: :tiger2: :rabbit2: :rabbit2: :dragon: :dragon: :goat: :goat: :rooster: :rooster: :dog2: :dog2: :pig2: :pig2: :mouse2: :mouse2: :ox: :ox: :dragon_face: :dragon_face: :blowfish: :blowfish: :crocodile: :crocodile: :dromedary_camel: :dromedary_camel: :leopard: :leopard: :cat2: :cat2: :poodle: :poodle: :paw_prints: :paw_prints: :bouquet: :bouquet: :cherry_blossom: :cherry_blossom: :tulip: :tulip: :four_leaf_clover: :four_leaf_clover: :rose: :rose: :sunflower: :sunflower: :hibiscus: :hibiscus: :maple_leaf: :maple_leaf: :leaves: :leaves: :fallen_leaf: :fallen_leaf: :herb: :herb: :mushroom: :mushroom: :cactus: :cactus: :palm_tree: :palm_tree: :evergreen_tree: :evergreen_tree: :deciduous_tree: :deciduous_tree: :chestnut: :chestnut: :seedling: :seedling: :blossom: :blossom: :ear_of_rice: :ear_of_rice: :shell: :shell: :globe_with_meridians: :globe_with_meridians: :sun_with_face: :sun_with_face: :full_moon_with_face: :full_moon_with_face: :new_moon_with_face: :new_moon_with_face: :new_moon: :new_moon: :waxing_crescent_moon: :waxing_crescent_moon: :first_quarter_moon: :first_quarter_moon: :waxing_gibbous_moon: :waxing_gibbous_moon: :full_moon: :full_moon: :waning_gibbous_moon: :waning_gibbous_moon: :last_quarter_moon: :last_quarter_moon: :waning_crescent_moon: :waning_crescent_moon: :last_quarter_moon_with_face: :last_quarter_moon_with_face: :first_quarter_moon_with_face: :first_quarter_moon_with_face: :crescent_moon: :crescent_moon: :earth_africa: :earth_africa: :earth_americas: :earth_americas: :earth_asia: :earth_asia: :volcano: :volcano: :milky_way: :milky_way: :partly_sunny: :partly_sunny: :octocat: :octocat: :squirrel: :squirrel: Objects ico emoji ico emoji :bamboo: :bamboo: :gift_heart: :gift_heart: :dolls: :dolls: :school_satchel: :school_satchel: :mortar_board: :mortar_board: :flags: :flags: :fireworks: :fireworks: :sparkler: :sparkler: :wind_chime: :wind_chime: :rice_scene: :rice_scene: :jack_o_lantern: :jack_o_lantern: :ghost: :ghost: :santa: :santa: :christmas_tree: :christmas_tree: :gift: :gift: :bell: :bell: :no_bell: :no_bell: :tanabata_tree: :tanabata_tree: :tada: :tada: :confetti_ball: :confetti_ball: :balloon: :balloon: :crystal_ball: :crystal_ball: :cd: :cd: :dvd: :dvd: :floppy_disk: :floppy_disk: :camera: :camera: :video_camera: :video_camera: :movie_camera: :movie_camera: :computer: :computer: :tv: :tv: :iphone: :iphone: :phone: :phone: :telephone: :telephone: :telephone_receiver: :telephone_receiver: :pager: :pager: :fax: :fax: :minidisc: :minidisc: :vhs: :vhs: :sound: :sound: :speaker: :speaker: :mute: :mute: :loudspeaker: :loudspeaker: :mega: :mega: :hourglass: :hourglass: :hourglass_flowing_sand: :hourglass_flowing_sand: :alarm_clock: :alarm_clock: :watch: :watch: :radio: :radio: :satellite: :satellite: :loop: :loop: :mag: :mag: :mag_right: :mag_right: :unlock: :unlock: :lock: :lock: :lock_with_ink_pen: :lock_with_ink_pen: :closed_lock_with_key: :closed_lock_with_key: :key: :key: :bulb: :bulb: :flashlight: :flashlight: :high_brightness: :high_brightness: :low_brightness: :low_brightness: :electric_plug: :electric_plug: :battery: :battery: :calling: :calling: :email: :email: :mailbox: :mailbox: :postbox: :postbox: :bath: :bath: :bathtub: :bathtub: :shower: :shower: :toilet: :toilet: :wrench: :wrench: :nut_and_bolt: :nut_and_bolt: :hammer: :hammer: :seat: :seat: :moneybag: :moneybag: :yen: :yen: :dollar: :dollar: :pound: :pound: :euro: :euro: :credit_card: :credit_card: :money_with_wings: :money_with_wings: :e-mail: :e-mail: :inbox_tray: :inbox_tray: :outbox_tray: :outbox_tray: :envelope: :envelope: :incoming_envelope: :incoming_envelope: :postal_horn: :postal_horn: :mailbox_closed: :mailbox_closed: :mailbox_with_mail: :mailbox_with_mail: :mailbox_with_no_mail: :mailbox_with_no_mail: :package: :package: :door: :door: :smoking: :smoking: :bomb: :bomb: :gun: :gun: :hocho: :hocho: :pill: :pill: :syringe: :syringe: :page_facing_up: :page_facing_up: :page_with_curl: :page_with_curl: :bookmark_tabs: :bookmark_tabs: :bar_chart: :bar_chart: :chart_with_upwards_trend: :chart_with_upwards_trend: :chart_with_downwards_trend: :chart_with_downwards_trend: :scroll: :scroll: :clipboard: :clipboard: :calendar: :calendar: :date: :date: :card_index: :card_index: :file_folder: :file_folder: :open_file_folder: :open_file_folder: :scissors: :scissors: :pushpin: :pushpin: :paperclip: :paperclip: :black_nib: :black_nib: :pencil2: :pencil2: :straight_ruler: :straight_ruler: :triangular_ruler: :triangular_ruler: :closed_book: :closed_book: :green_book: :green_book: :blue_book: :blue_book: :orange_book: :orange_book: :notebook: :notebook: :notebook_with_decorative_cover: :notebook_with_decorative_cover: :ledger: :ledger: :books: :books: :bookmark: :bookmark: :name_badge: :name_badge: :microscope: :microscope: :telescope: :telescope: :newspaper: :newspaper: :football: :football: :basketball: :basketball: :soccer: :soccer: :baseball: :baseball: :tennis: :tennis: :8ball: :8ball: :rugby_football: :rugby_football: :bowling: :bowling: :golf: :golf: :mountain_bicyclist: :mountain_bicyclist: :bicyclist: :bicyclist: :horse_racing: :horse_racing: :snowboarder: :snowboarder: :swimmer: :swimmer: :surfer: :surfer: :ski: :ski: :spades: :spades: :hearts: :hearts: :clubs: :clubs: :diamonds: :diamonds: :gem: :gem: :ring: :ring: :trophy: :trophy: :musical_score: :musical_score: :musical_keyboard: :musical_keyboard: :violin: :violin: :space_invader: :space_invader: :video_game: :video_game: :black_joker: :black_joker: :flower_playing_cards: :flower_playing_cards: :game_die: :game_die: :dart: :dart: :mahjong: :mahjong: :clapper: :clapper: :memo: :memo: :pencil: :pencil: :book: :book: :art: :art: :microphone: :microphone: :headphones: :headphones: :trumpet: :trumpet: :saxophone: :saxophone: :guitar: :guitar: :shoe: :shoe: :sandal: :sandal: :high_heel: :high_heel: :lipstick: :lipstick: :boot: :boot: :shirt: :shirt: :tshirt: :tshirt: :necktie: :necktie: :womans_clothes: :womans_clothes: :dress: :dress: :running_shirt_with_sash: :running_shirt_with_sash: :jeans: :jeans: :kimono: :kimono: :bikini: :bikini: :ribbon: :ribbon: :tophat: :tophat: :crown: :crown: :womans_hat: :womans_hat: :mans_shoe: :mans_shoe: :closed_umbrella: :closed_umbrella: :briefcase: :briefcase: :handbag: :handbag: :pouch: :pouch: :purse: :purse: :eyeglasses: :eyeglasses: :fishing_pole_and_fish: :fishing_pole_and_fish: :coffee: :coffee: :tea: :tea: :sake: :sake: :baby_bottle: :baby_bottle: :beer: :beer: :beers: :beers: :cocktail: :cocktail: :tropical_drink: :tropical_drink: :wine_glass: :wine_glass: :fork_and_knife: :fork_and_knife: :pizza: :pizza: :hamburger: :hamburger: :fries: :fries: :poultry_leg: :poultry_leg: :meat_on_bone: :meat_on_bone: :spaghetti: :spaghetti: :curry: :curry: :fried_shrimp: :fried_shrimp: :bento: :bento: :sushi: :sushi: :fish_cake: :fish_cake: :rice_ball: :rice_ball: :rice_cracker: :rice_cracker: :rice: :rice: :ramen: :ramen: :stew: :stew: :oden: :oden: :dango: :dango: :egg: :egg: :bread: :bread: :doughnut: :doughnut: :custard: :custard: :icecream: :icecream: :ice_cream: :ice_cream: :shaved_ice: :shaved_ice: :birthday: :birthday: :cake: :cake: :cookie: :cookie: :chocolate_bar: :chocolate_bar: :candy: :candy: :lollipop: :lollipop: :honey_pot: :honey_pot: :apple: :apple: :green_apple: :green_apple: :tangerine: :tangerine: :lemon: :lemon: :cherries: :cherries: :grapes: :grapes: :watermelon: :watermelon: :strawberry: :strawberry: :peach: :peach: :melon: :melon: :banana: :banana: :pear: :pear: :pineapple: :pineapple: :sweet_potato: :sweet_potato: :eggplant: :eggplant: :tomato: :tomato: :corn: :corn: Places ico emoji ico emoji :house: :house: :house_with_garden: :house_with_garden: :school: :school: :office: :office: :post_office: :post_office: :hospital: :hospital: :bank: :bank: :convenience_store: :convenience_store: :love_hotel: :love_hotel: :hotel: :hotel: :wedding: :wedding: :church: :church: :department_store: :department_store: :european_post_office: :european_post_office: :city_sunrise: :city_sunrise: :city_sunset: :city_sunset: :japanese_castle: :japanese_castle: :european_castle: :european_castle: :tent: :tent: :factory: :factory: :tokyo_tower: :tokyo_tower: :japan: :japan: :mount_fuji: :mount_fuji: :sunrise_over_mountains: :sunrise_over_mountains: :sunrise: :sunrise: :stars: :stars: :statue_of_liberty: :statue_of_liberty: :bridge_at_night: :bridge_at_night: :carousel_horse: :carousel_horse: :rainbow: :rainbow: :ferris_wheel: :ferris_wheel: :fountain: :fountain: :roller_coaster: :roller_coaster: :ship: :ship: :speedboat: :speedboat: :boat: :boat: :sailboat: :sailboat: :rowboat: :rowboat: :anchor: :anchor: :rocket: :rocket: :airplane: :airplane: :helicopter: :helicopter: :steam_locomotive: :steam_locomotive: :tram: :tram: :mountain_railway: :mountain_railway: :bike: :bike: :aerial_tramway: :aerial_tramway: :suspension_railway: :suspension_railway: :mountain_cableway: :mountain_cableway: :tractor: :tractor: :blue_car: :blue_car: :oncoming_automobile: :oncoming_automobile: :car: :car: :red_car: :red_car: :taxi: :taxi: :oncoming_taxi: :oncoming_taxi: :articulated_lorry: :articulated_lorry: :bus: :bus: :oncoming_bus: :oncoming_bus: :rotating_light: :rotating_light: :police_car: :police_car: :oncoming_police_car: :oncoming_police_car: :fire_engine: :fire_engine: :ambulance: :ambulance: :minibus: :minibus: :truck: :truck: :train: :train: :station: :station: :train2: :train2: :bullettrain_front: :bullettrain_front: :bullettrain_side: :bullettrain_side: :light_rail: :light_rail: :monorail: :monorail: :railway_car: :railway_car: :trolleybus: :trolleybus: :ticket: :ticket: :fuelpump: :fuelpump: :vertical_traffic_light: :vertical_traffic_light: :traffic_light: :traffic_light: :warning: :warning: :construction: :construction: :beginner: :beginner: :atm: :atm: :slot_machine: :slot_machine: :busstop: :busstop: :barber: :barber: :hotsprings: :hotsprings: :checkered_flag: :checkered_flag: :crossed_flags: :crossed_flags: :izakaya_lantern: :izakaya_lantern: :moyai: :moyai: :circus_tent: :circus_tent: :performing_arts: :performing_arts: :round_pushpin: :round_pushpin: :triangular_flag_on_post: :triangular_flag_on_post: :jp: :jp: :kr: :kr: :cn: :cn: :us: :us: :fr: :fr: :es: :es: :it: :it: :ru: :ru: :gb: :gb: :uk: :uk: :de: :de: Symbols ico emoji ico emoji :one: :one: :two: :two: :three: :three: :four: :four: :five: :five: :six: :six: :seven: :seven: :eight: :eight: :nine: :nine: :keycap_ten: :keycap_ten: :1234: :1234: :zero: :zero: :hash: :hash: :symbols: :symbols: :arrow_backward: :arrow_backward: :arrow_down: :arrow_down: :arrow_forward: :arrow_forward: :arrow_left: :arrow_left: :capital_abcd: :capital_abcd: :abcd: :abcd: :abc: :abc: :arrow_lower_left: :arrow_lower_left: :arrow_lower_right: :arrow_lower_right: :arrow_right: :arrow_right: :arrow_up: :arrow_up: :arrow_upper_left: :arrow_upper_left: :arrow_upper_right: :arrow_upper_right: :arrow_double_down: :arrow_double_down: :arrow_double_up: :arrow_double_up: :arrow_down_small: :arrow_down_small: :arrow_heading_down: :arrow_heading_down: :arrow_heading_up: :arrow_heading_up: :leftwards_arrow_with_hook: :leftwards_arrow_with_hook: :arrow_right_hook: :arrow_right_hook: :left_right_arrow: :left_right_arrow: :arrow_up_down: :arrow_up_down: :arrow_up_small: :arrow_up_small: :arrows_clockwise: :arrows_clockwise: :arrows_counterclockwise: :arrows_counterclockwise: :rewind: :rewind: :fast_forward: :fast_forward: :information_source: :information_source: :ok: :ok: :twisted_rightwards_arrows: :twisted_rightwards_arrows: :repeat: :repeat: :repeat_one: :repeat_one: :new: :new: :top: :top: :up: :up: :cool: :cool: :free: :free: :ng: :ng: :cinema: :cinema: :koko: :koko: :signal_strength: :signal_strength: :u5272: :u5272: :u5408: :u5408: :u55b6: :u55b6: :u6307: :u6307: :u6708: :u6708: :u6709: :u6709: :u6e80: :u6e80: :u7121: :u7121: :u7533: :u7533: :u7a7a: :u7a7a: :u7981: :u7981: :sa: :sa: :restroom: :restroom: :mens: :mens: :womens: :womens: :baby_symbol: :baby_symbol: :no_smoking: :no_smoking: :parking: :parking: :wheelchair: :wheelchair: :metro: :metro: :baggage_claim: :baggage_claim: :accept: :accept: :wc: :wc: :potable_water: :potable_water: :put_litter_in_its_place: :put_litter_in_its_place: :secret: :secret: :congratulations: :congratulations: :m: :m: :passport_control: :passport_control: :left_luggage: :left_luggage: :customs: :customs: :ideograph_advantage: :ideograph_advantage: :cl: :cl: :sos: :sos: :id: :id: :no_entry_sign: :no_entry_sign: :underage: :underage: :no_mobile_phones: :no_mobile_phones: :do_not_litter: :do_not_litter: :non-potable_water: :non-potable_water: :no_bicycles: :no_bicycles: :no_pedestrians: :no_pedestrians: :children_crossing: :children_crossing: :no_entry: :no_entry: :eight_spoked_asterisk: :eight_spoked_asterisk: :sparkle: :sparkle: :eight_pointed_black_star: :eight_pointed_black_star: :heart_decoration: :heart_decoration: :vs: :vs: :vibration_mode: :vibration_mode: :mobile_phone_off: :mobile_phone_off: :chart: :chart: :currency_exchange: :currency_exchange: :aries: :aries: :taurus: :taurus: :gemini: :gemini: :cancer: :cancer: :leo: :leo: :virgo: :virgo: :libra: :libra: :scorpius: :scorpius: :sagittarius: :sagittarius: :capricorn: :capricorn: :aquarius: :aquarius: :pisces: :pisces: :ophiuchus: :ophiuchus: :six_pointed_star: :six_pointed_star: :negative_squared_cross_mark: :negative_squared_cross_mark: :a: :a: :b: :b: :ab: :ab: :o2: :o2: :diamond_shape_with_a_dot_inside: :diamond_shape_with_a_dot_inside: :recycle: :recycle: :end: :end: :back: :back: :on: :on: :soon: :soon: :clock1: :clock1: :clock130: :clock130: :clock10: :clock10: :clock1030: :clock1030: :clock11: :clock11: :clock1130: :clock1130: :clock12: :clock12: :clock1230: :clock1230: :clock2: :clock2: :clock230: :clock230: :clock3: :clock3: :clock330: :clock330: :clock4: :clock4: :clock430: :clock430: :clock5: :clock5: :clock530: :clock530: :clock6: :clock6: :clock630: :clock630: :clock7: :clock7: :clock730: :clock730: :clock8: :clock8: :clock830: :clock830: :clock9: :clock9: :clock930: :clock930: :heavy_dollar_sign: :heavy_dollar_sign: :copyright: :copyright: :registered: :registered: :tm: :tm: :x: :x: :heavy_exclamation_mark: :heavy_exclamation_mark: :bangbang: :bangbang: :interrobang: :interrobang: :o: :o: :heavy_multiplication_x: :heavy_multiplication_x: :heavy_plus_sign: :heavy_plus_sign: :heavy_minus_sign: :heavy_minus_sign: :heavy_division_sign: :heavy_division_sign: :white_flower: :white_flower: :100: :100: :heavy_check_mark: :heavy_check_mark: :ballot_box_with_check: :ballot_box_with_check: :radio_button: :radio_button: :link: :link: :curly_loop: :curly_loop: :wavy_dash: :wavy_dash: :part_alternation_mark: :part_alternation_mark: :trident: :trident: :black_small_square: :black_small_square: :white_small_square: :white_small_square: :black_medium_small_square: :black_medium_small_square: :white_medium_small_square: :white_medium_small_square: :black_medium_square: :black_medium_square: :white_medium_square: :white_medium_square: :black_large_square: :black_large_square: :white_large_square: :white_large_square: :white_check_mark: :white_check_mark: :black_square_button: :black_square_button: :white_square_button: :white_square_button: :black_circle: :black_circle: :white_circle: :white_circle: :red_circle: :red_circle: :large_blue_circle: :large_blue_circle: :large_blue_diamond: :large_blue_diamond: :large_orange_diamond: :large_orange_diamond: :small_blue_diamond: :small_blue_diamond: :small_orange_diamond: :small_orange_diamond: :small_red_triangle: :small_red_triangle: :small_red_triangle_down: :small_red_triangle_down: :shipit: :shipit: Uncategorized ico emoji ico emoji :1st_place_medal: :1st_place_medal: :2nd_place_medal: :2nd_place_medal: :3rd_place_medal: :3rd_place_medal: :afghanistan: :afghanistan: :aland_islands: :aland_islands: :albania: :albania: :alembic: :alembic: :algeria: :algeria: :american_samoa: :american_samoa: :amphora: :amphora: :andorra: :andorra: :angola: :angola: :anguilla: :anguilla: :antarctica: :antarctica: :antigua_barbuda: :antigua_barbuda: :argentina: :argentina: :armenia: :armenia: :artificial_satellite: :artificial_satellite: :aruba: :aruba: :asterisk: :asterisk: :athletic_shoe: :athletic_shoe: :atom: :atom: :atom_symbol: :atom_symbol: :australia: :australia: :austria: :austria: :avocado: :avocado: :azerbaijan: :azerbaijan: :bacon: :bacon: :badminton: :badminton: :baguette_bread: :baguette_bread: :bahamas: :bahamas: :bahrain: :bahrain: :balance_scale: :balance_scale: :ballot_box: :ballot_box: :bangladesh: :bangladesh: :barbados: :barbados: :basketball_man: :basketball_man: :basketball_woman: :basketball_woman: :bat: :bat: :beach_umbrella: :beach_umbrella: :bed: :bed: :bee: :bee: :belarus: :belarus: :belgium: :belgium: :belize: :belize: :bellhop_bell: :bellhop_bell: :benin: :benin: :bermuda: :bermuda: :bhutan: :bhutan: :biking_man: :biking_man: :biking_woman: :biking_woman: :biohazard: :biohazard: :black_flag: :black_flag: :black_heart: :black_heart: :blonde_man: :blonde_man: :blonde_woman: :blonde_woman: :bolivia: :bolivia: :bosnia_herzegovina: :bosnia_herzegovina: :botswana: :botswana: :bow_and_arrow: :bow_and_arrow: :bowing_man: :bowing_man: :bowing_woman: :bowing_woman: :boxing_glove: :boxing_glove: :brazil: :brazil: :british_indian_ocean_territory: :british_indian_ocean_territory: :british_virgin_islands: :british_virgin_islands: :brunei: :brunei: :building_construction: :building_construction: :bulgaria: :bulgaria: :burkina_faso: :burkina_faso: :burrito: :burrito: :burundi: :burundi: :business_suit_levitating: :business_suit_levitating: :butterfly: :butterfly: :call_me_hand: :call_me_hand: :cambodia: :cambodia: :camera_flash: :camera_flash: :cameroon: :cameroon: :camping: :camping: :canada: :canada: :canary_islands: :canary_islands: :candle: :candle: :canoe: :canoe: :cape_verde: :cape_verde: :card_file_box: :card_file_box: :card_index_dividers: :card_index_dividers: :caribbean_netherlands: :caribbean_netherlands: :carrot: :carrot: :cayman_islands: :cayman_islands: :central_african_republic: :central_african_republic: :chad: :chad: :chains: :chains: :champagne: :champagne: :cheese: :cheese: :chile: :chile: :chipmunk: :chipmunk: :christmas_island: :christmas_island: :cityscape: :cityscape: :clamp: :clamp: :classical_building: :classical_building: :clinking_glasses: :clinking_glasses: :cloud_with_lightning: :cloud_with_lightning: :cloud_with_lightning_and_rain: :cloud_with_lightning_and_rain: :cloud_with_rain: :cloud_with_rain: :cloud_with_snow: :cloud_with_snow: :clown_face: :clown_face: :cocos_islands: :cocos_islands: :coffin: :coffin: :colombia: :colombia: :comet: :comet: :comoros: :comoros: :computer_mouse: :computer_mouse: :congo_brazzaville: :congo_brazzaville: :congo_kinshasa: :congo_kinshasa: :construction_worker_man: :construction_worker_man: :construction_worker_woman: :construction_worker_woman: :control_knobs: :control_knobs: :cook_islands: :cook_islands: :costa_rica: :costa_rica: :cote_divoire: :cote_divoire: :couch_and_lamp: :couch_and_lamp: :couple_with_heart_man_man: :couple_with_heart_man_man: :couple_with_heart_woman_man: :couple_with_heart_woman_man: :couple_with_heart_woman_woman: :couple_with_heart_woman_woman: :couplekiss_man_man: :couplekiss_man_man: :couplekiss_man_woman: :couplekiss_man_woman: :couplekiss_woman_woman: :couplekiss_woman_woman: :cowboy_hat_face: :cowboy_hat_face: :crab: :crab: :crayon: :crayon: :cricket: :cricket: :croatia: :croatia: :croissant: :croissant: :crossed_fingers: :crossed_fingers: :crossed_swords: :crossed_swords: :cuba: :cuba: :cucumber: :cucumber: :curacao: :curacao: :cyprus: :cyprus: :czech_republic: :czech_republic: :dagger: :dagger: :dancing_men: :dancing_men: :dancing_women: :dancing_women: :dark_sunglasses: :dark_sunglasses: :deer: :deer: :denmark: :denmark: :derelict_house: :derelict_house: :desert: :desert: :desert_island: :desert_island: :desktop_computer: :desktop_computer: :detective: :detective: :djibouti: :djibouti: :dominica: :dominica: :dominican_republic: :dominican_republic: :dove: :dove: :drooling_face: :drooling_face: :drum: :drum: :duck: :duck: :eagle: :eagle: :ecuador: :ecuador: :egypt: :egypt: :el_salvador: :el_salvador: :electron: :electron: :envelope_with_arrow: :envelope_with_arrow: :equatorial_guinea: :equatorial_guinea: :eritrea: :eritrea: :estonia: :estonia: :ethiopia: :ethiopia: :eu: :eu: :european_union: :european_union: :eye: :eye: :eye_speech_bubble: :eye_speech_bubble: :face_with_head_bandage: :face_with_head_bandage: :face_with_thermometer: :face_with_thermometer: :falkland_islands: :falkland_islands: :family_man_boy: :family_man_boy: :family_man_boy_boy: :family_man_boy_boy: :family_man_girl: :family_man_girl: :family_man_girl_boy: :family_man_girl_boy: :family_man_girl_girl: :family_man_girl_girl: :family_man_man_boy: :family_man_man_boy: :family_man_man_boy_boy: :family_man_man_boy_boy: :family_man_man_girl: :family_man_man_girl: :family_man_man_girl_boy: :family_man_man_girl_boy: :family_man_man_girl_girl: :family_man_man_girl_girl: :family_man_woman_boy: :family_man_woman_boy: :family_man_woman_boy_boy: :family_man_woman_boy_boy: :family_man_woman_girl: :family_man_woman_girl: :family_man_woman_girl_boy: :family_man_woman_girl_boy: :family_man_woman_girl_girl: :family_man_woman_girl_girl: :family_woman_boy: :family_woman_boy: :family_woman_boy_boy: :family_woman_boy_boy: :family_woman_girl: :family_woman_girl: :family_woman_girl_boy: :family_woman_girl_boy: :family_woman_girl_girl: :family_woman_girl_girl: :family_woman_woman_boy: :family_woman_woman_boy: :family_woman_woman_boy_boy: :family_woman_woman_boy_boy: :family_woman_woman_girl: :family_woman_woman_girl: :family_woman_woman_girl_boy: :family_woman_woman_girl_boy: :family_woman_woman_girl_girl: :family_woman_woman_girl_girl: :faroe_islands: :faroe_islands: :female_detective: :female_detective: :ferry: :ferry: :field_hockey: :field_hockey: :fiji: :fiji: :file_cabinet: :file_cabinet: :film_projector: :film_projector: :film_strip: :film_strip: :finland: :finland: :fist_left: :fist_left: :fist_oncoming: :fist_oncoming: :fist_raised: :fist_raised: :fist_right: :fist_right: :fleur_de_lis: :fleur_de_lis: :flight_arrival: :flight_arrival: :flight_departure: :flight_departure: :flipper: :flipper: :fog: :fog: :footprints: :footprints: :fountain_pen: :fountain_pen: :fox_face: :fox_face: :framed_picture: :framed_picture: :french_guiana: :french_guiana: :french_polynesia: :french_polynesia: :french_southern_territories: :french_southern_territories: :fried_egg: :fried_egg: :frowning_face: :frowning_face: :frowning_man: :frowning_man: :frowning_woman: :frowning_woman: :funeral_urn: :funeral_urn: :gabon: :gabon: :gambia: :gambia: :gear: :gear: :georgia: :georgia: :ghana: :ghana: :gibraltar: :gibraltar: :goal_net: :goal_net: :golfing_man: :golfing_man: :golfing_woman: :golfing_woman: :gorilla: :gorilla: :greece: :greece: :green_salad: :green_salad: :greenland: :greenland: :grenada: :grenada: :guadeloupe: :guadeloupe: :guam: :guam: :guardswoman: :guardswoman: :guatemala: :guatemala: :guernsey: :guernsey: :guinea: :guinea: :guinea_bissau: :guinea_bissau: :guyana: :guyana: :haircut_man: :haircut_man: :haircut_woman: :haircut_woman: :haiti: :haiti: :hammer_and_pick: :hammer_and_pick: :hammer_and_wrench: :hammer_and_wrench: :handshake: :handshake: :heavy_heart_exclamation: :heavy_heart_exclamation: :hole: :hole: :honduras: :honduras: :hong_kong: :hong_kong: :hot_pepper: :hot_pepper: :hotdog: :hotdog: :houses: :houses: :hugs: :hugs: :hungary: :hungary: :ice_hockey: :ice_hockey: :ice_skate: :ice_skate: :iceland: :iceland: :india: :india: :indonesia: :indonesia: :iran: :iran: :iraq: :iraq: :ireland: :ireland: :isle_of_man: :isle_of_man: :israel: :israel: :jamaica: :jamaica: :jersey: :jersey: :jordan: :jordan: :joystick: :joystick: :kaaba: :kaaba: :kazakhstan: :kazakhstan: :kenya: :kenya: :keyboard: :keyboard: :kick_scooter: :kick_scooter: :kiribati: :kiribati: :kiwi_fruit: :kiwi_fruit: :knife: :knife: :kosovo: :kosovo: :kuwait: :kuwait: :kyrgyzstan: :kyrgyzstan: :label: :label: :lantern: :lantern: :laos: :laos: :latin_cross: :latin_cross: :latvia: :latvia: :lebanon: :lebanon: :lesotho: :lesotho: :level_slider: :level_slider: :liberia: :liberia: :libya: :libya: :liechtenstein: :liechtenstein: :lion: :lion: :lithuania: :lithuania: :lizard: :lizard: :loud_sound: :loud_sound: :luxembourg: :luxembourg: :lying_face: :lying_face: :macau: :macau: :macedonia: :macedonia: :madagascar: :madagascar: :malawi: :malawi: :malaysia: :malaysia: :maldives: :maldives: :male_detective: :male_detective: :mali: :mali: :malta: :malta: :man_artist: :man_artist: :man_astronaut: :man_astronaut: :man_cartwheeling: :man_cartwheeling: :man_cook: :man_cook: :man_dancing: :man_dancing: :man_facepalming: :man_facepalming: :man_factory_worker: :man_factory_worker: :man_farmer: :man_farmer: :man_firefighter: :man_firefighter: :man_health_worker: :man_health_worker: :man_in_tuxedo: :man_in_tuxedo: :man_judge: :man_judge: :man_juggling: :man_juggling: :man_mechanic: :man_mechanic: :man_office_worker: :man_office_worker: :man_pilot: :man_pilot: :man_playing_handball: :man_playing_handball: :man_playing_water_polo: :man_playing_water_polo: :man_scientist: :man_scientist: :man_shrugging: :man_shrugging: :man_singer: :man_singer: :man_student: :man_student: :man_teacher: :man_teacher: :man_technologist: :man_technologist: :mandarin: :mandarin: :mantelpiece_clock: :mantelpiece_clock: :marshall_islands: :marshall_islands: :martial_arts_uniform: :martial_arts_uniform: :martinique: :martinique: :massage_man: :massage_man: :massage_woman: :massage_woman: :mauritania: :mauritania: :mauritius: :mauritius: :mayotte: :mayotte: :medal_military: :medal_military: :medal_sports: :medal_sports: :men_wrestling: :men_wrestling: :menorah: :menorah: :mexico: :mexico: :micronesia: :micronesia: :middle_finger: :middle_finger: :milk_glass: :milk_glass: :moldova: :moldova: :monaco: :monaco: :money_mouth_face: :money_mouth_face: :mongolia: :mongolia: :montenegro: :montenegro: :montserrat: :montserrat: :moon: :moon: :morocco: :morocco: :mosque: :mosque: :motor_boat: :motor_boat: :motor_scooter: :motor_scooter: :motorcycle: :motorcycle: :motorway: :motorway: :mountain: :mountain: :mountain_biking_man: :mountain_biking_man: :mountain_biking_woman: :mountain_biking_woman: :mountain_snow: :mountain_snow: :mozambique: :mozambique: :mrs_claus: :mrs_claus: :myanmar: :myanmar: :namibia: :namibia: :national_park: :national_park: :nauru: :nauru: :nauseated_face: :nauseated_face: :nepal: :nepal: :nerd_face: :nerd_face: :netherlands: :netherlands: :new_caledonia: :new_caledonia: :new_zealand: :new_zealand: :newspaper_roll: :newspaper_roll: :next_track_button: :next_track_button: :ng_man: :ng_man: :ng_woman: :ng_woman: :nicaragua: :nicaragua: :niger: :niger: :nigeria: :nigeria: :night_with_stars: :night_with_stars: :niue: :niue: :no_good_man: :no_good_man: :no_good_woman: :no_good_woman: :norfolk_island: :norfolk_island: :north_korea: :north_korea: :northern_mariana_islands: :northern_mariana_islands: :norway: :norway: :oil_drum: :oil_drum: :ok_man: :ok_man: :old_key: :old_key: :om: :om: :oman: :oman: :open_book: :open_book: :open_umbrella: :open_umbrella: :orange: :orange: :orthodox_cross: :orthodox_cross: :owl: :owl: :paintbrush: :paintbrush: :pakistan: :pakistan: :palau: :palau: :palestinian_territories: :palestinian_territories: :panama: :panama: :pancakes: :pancakes: :paperclips: :paperclips: :papua_new_guinea: :papua_new_guinea: :paraguay: :paraguay: :parasol_on_ground: :parasol_on_ground: :passenger_ship: :passenger_ship: :pause_button: :pause_button: :peace_symbol: :peace_symbol: :peanuts: :peanuts: :pen: :pen: :person_fencing: :person_fencing: :peru: :peru: :philippines: :philippines: :pick: :pick: :ping_pong: :ping_pong: :pitcairn_islands: :pitcairn_islands: :place_of_worship: :place_of_worship: :plate_with_cutlery: :plate_with_cutlery: :play_or_pause_button: :play_or_pause_button: :poland: :poland: :policeman: :policeman: :policewoman: :policewoman: :popcorn: :popcorn: :portugal: :portugal: :potato: :potato: :pout: :pout: :pouting_man: :pouting_man: :pouting_woman: :pouting_woman: :prayer_beads: :prayer_beads: :pregnant_woman: :pregnant_woman: :previous_track_button: :previous_track_button: :prince: :prince: :printer: :printer: :puerto_rico: :puerto_rico: :qatar: :qatar: :racing_car: :racing_car: :radioactive: :radioactive: :railway_track: :railway_track: :rainbow_flag: :rainbow_flag: :raised_back_of_hand: :raised_back_of_hand: :raised_hand_with_fingers_splayed: :raised_hand_with_fingers_splayed: :raising_hand_man: :raising_hand_man: :raising_hand_woman: :raising_hand_woman: :record_button: :record_button: :reminder_ribbon: :reminder_ribbon: :rescue_worker_helmet: :rescue_worker_helmet: :reunion: :reunion: :rhinoceros: :rhinoceros: :right_anger_bubble: :right_anger_bubble: :robot: :robot: :romania: :romania: :rosette: :rosette: :rowing_man: :rowing_man: :rowing_woman: :rowing_woman: :running_man: :running_man: :running_woman: :running_woman: :rwanda: :rwanda: :samoa: :samoa: :san_marino: :san_marino: :sao_tome_principe: :sao_tome_principe: :sassy_man: :sassy_man: :sassy_woman: :sassy_woman: :saudi_arabia: :saudi_arabia: :scorpion: :scorpion: :selfie: :selfie: :senegal: :senegal: :serbia: :serbia: :seychelles: :seychelles: :shallow_pan_of_food: :shallow_pan_of_food: :shamrock: :shamrock: :shark: :shark: :shield: :shield: :shinto_shrine: :shinto_shrine: :shopping: :shopping: :shopping_cart: :shopping_cart: :shrimp: :shrimp: :sierra_leone: :sierra_leone: :singapore: :singapore: :sint_maarten: :sint_maarten: :skier: :skier: :skull_and_crossbones: :skull_and_crossbones: :sleeping_bed: :sleeping_bed: :slovakia: :slovakia: :slovenia: :slovenia: :small_airplane: :small_airplane: :sneezing_face: :sneezing_face: :snowman_with_snow: :snowman_with_snow: :solomon_islands: :solomon_islands: :somalia: :somalia: :south_africa: :south_africa: :south_georgia_south_sandwich_islands: :south_georgia_south_sandwich_islands: :south_sudan: :south_sudan: :speaking_head: :speaking_head: :spider: :spider: :spider_web: :spider_web: :spiral_calendar: :spiral_calendar: :spiral_notepad: :spiral_notepad: :spoon: :spoon: :squid: :squid: :sri_lanka: :sri_lanka: :st_barthelemy: :st_barthelemy: :st_helena: :st_helena: :st_kitts_nevis: :st_kitts_nevis: :st_lucia: :st_lucia: :st_pierre_miquelon: :st_pierre_miquelon: :st_vincent_grenadines: :st_vincent_grenadines: :stadium: :stadium: :star_and_crescent: :star_and_crescent: :star_of_david: :star_of_david: :stop_button: :stop_button: :stop_sign: :stop_sign: :stopwatch: :stopwatch: :studio_microphone: :studio_microphone: :stuffed_flatbread: :stuffed_flatbread: :sudan: :sudan: :sun_behind_large_cloud: :sun_behind_large_cloud: :sun_behind_rain_cloud: :sun_behind_rain_cloud: :sun_behind_small_cloud: :sun_behind_small_cloud: :surfing_man: :surfing_man: :surfing_woman: :surfing_woman: :suriname: :suriname: :swaziland: :swaziland: :sweden: :sweden: :swimming_man: :swimming_man: :swimming_woman: :swimming_woman: :switzerland: :switzerland: :synagogue: :synagogue: :syria: :syria: :taco: :taco: :taiwan: :taiwan: :tajikistan: :tajikistan: :tanzania: :tanzania: :thailand: :thailand: :thermometer: :thermometer: :uruguay: :uruguay: :tickets: :tickets: :timer_clock: :timer_clock: :timor_leste: :timor_leste: :tipping_hand_man: :tipping_hand_man: :tipping_hand_woman: :tipping_hand_woman: :togo: :togo: :tokelau: :tokelau: :tonga: :tonga: :tornado: :tornado: :tr: :tr: :trackball: :trackball: :trinidad_tobago: :trinidad_tobago: :tumbler_glass: :tumbler_glass: :tunisia: :tunisia: :turkey: :turkey: :turkmenistan: :turkmenistan: :turks_caicos_islands: :turks_caicos_islands: :tuvalu: :tuvalu: :uganda: :uganda: :ukraine: :ukraine: :unicorn: :unicorn: :united_arab_emirates: :united_arab_emirates: :us_virgin_islands: :us_virgin_islands: :uzbekistan: :uzbekistan: :vanuatu: :vanuatu: :vatican_city: :vatican_city: :venezuela: :venezuela: :vietnam: :vietnam: :volleyball: :volleyball: :vulcan_salute: :vulcan_salute: :walking: :walking: :walking_man: :walking_man: :walking_woman: :walking_woman: :wallis_futuna: :wallis_futuna: :wastebasket: :wastebasket: :weight_lifting_man: :weight_lifting_man: :weight_lifting_woman: :weight_lifting_woman: :western_sahara: :western_sahara: :wheel_of_dharma: :wheel_of_dharma: :white_flag: :white_flag: :wilted_flower: :wilted_flower: :wind_face: :wind_face: :woman_artist: :woman_artist: :woman_astronaut: :woman_astronaut: :woman_cartwheeling: :woman_cartwheeling: :woman_cook: :woman_cook: :woman_facepalming: :woman_facepalming: :woman_factory_worker: :woman_factory_worker: :woman_farmer: :woman_farmer: :woman_firefighter: :woman_firefighter: :woman_health_worker: :woman_health_worker: :woman_judge: :woman_judge: :woman_juggling: :woman_juggling: :woman_mechanic: :woman_mechanic: :woman_office_worker: :woman_office_worker: :woman_pilot: :woman_pilot: :woman_playing_handball: :woman_playing_handball: :woman_playing_water_polo: :woman_playing_water_polo: :woman_scientist: :woman_scientist: :woman_shrugging: :woman_shrugging: :woman_singer: :woman_singer: :woman_student: :woman_student: :woman_teacher: :woman_teacher: :woman_technologist: :woman_technologist: :woman_with_turban: :woman_with_turban: :women_wrestling: :women_wrestling: :world_map: :world_map: :writing_hand: :writing_hand: :yemen: :yemen: :yin_yang: :yin_yang: :zambia: :zambia: :zimbabwe: :zimbabwe:","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://sunhwee.github.io/tags/Markdown/"},{"name":"Emoji","slug":"Emoji","permalink":"https://sunhwee.github.io/tags/Emoji/"},{"name":"表情包","slug":"表情包","permalink":"https://sunhwee.github.io/tags/表情包/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"Python GUI之tkinter窗口视窗教程大集合（看这篇就够了）","slug":"Python-GUI-TKinter-Tutorial","date":"2019-08-16T07:36:09.000Z","updated":"2019-08-21T11:25:08.092Z","comments":true,"path":"2019/08/16/Python-GUI-TKinter-Tutorial/","link":"","permalink":"https://sunhwee.github.io/2019/08/16/Python-GUI-TKinter-Tutorial/","excerpt":"","text":"一、前言 这篇文章是去年8月份学习python时顺便在博客园写的一篇笔记，现在搬运到hexo博客上来，主要针对新手。由于本篇文章较长，所以下面给出内容目录方便跳转阅读，当然也可以用博客页面最右侧的文章目录导航栏进行跳转查阅。 首次发布博客园，原地址：Python GUI之tkinter窗口视窗教程大集合（看这篇就够了） 一、前言 二、Tkinter 是什么 三、Tkinter 控件详细介绍 Tkinter 模块元素简要说明 常用窗口部件及简要说明： 四、动手实践学习 创建主窗口及Label部件（标签）创建使用 Button窗口部件 Entry窗口部件 Text窗口部件 Listbox窗口部件 Radiobutton窗口部件 Checkbutton窗口部件 Scale窗口部件 Canvas窗口部件 Menu窗口部件 Frame 窗口部件 messageBox窗口部件 窗口部件三种放置方式pack/grid/place 综合练习，用户登录窗口例子 其他部件后续再补充… 二、Tkinter是什么 Tkinter 是使用 python 进行窗口视窗设计的模块。Tkinter模块(“Tk 接口”)是Python的标准Tk GUI工具包的接口。作为 python 特定的GUI界面，是一个图像的窗口，tkinter是python 自带的，可以编辑的GUI界面，我们可以用GUI 实现很多直观的功能，比如想开发一个计算器，如果只是一个程序输入，输出窗口的话，是没用用户体验的。所有开发一个图像化的小窗口，就是必要的。 对于稍有GUI编程经验的人来说，Python的Tkinter界面库是非常简单的。python的GUI库非常多，选择`Tkinter，一是最为简单，二是自带库，不需下载安装，随时使用，三则是从需求出发，Python作为一种脚本语言，一种胶水语言，一般不会用它来开发复杂的桌面应用，它并不具备这方面的优势，使用Python，可以把它作为一个灵活的工具，而不是作为主要开发语言，那么在工作中，需要制作一个小工具，肯定是需要有界面的，不仅自己用，也能分享别人使用，在这种需求下，Tkinter是足够胜任的！ 这篇文章主要做一个简单概述和实践编程，对于从没有接触过GUI的新手，在脑中树立一个基本的界面编程概念，同时自己也能学会如何简单的实现一些小的图形窗口功能。 对于Tkinter编程，可以用两个比喻来理解： 第一个，作画。我们都见过美术生写生的情景，先支一个画架，放上画板，蒙上画布，构思内容，用铅笔画草图，组织结构和比例，调色板调色，最后画笔勾勒。相应的，对应到tkinter编程，那么我们的显示屏就是支起来的画架，根窗体就是画板，在tkinter中则是Toplevel，画布就是tkinter中的容器（Frame），画板上可以放很多张画布（Convas），tkinter中的容器中也可以放很多个容器，绘画中的构图布局则是tkinter中的布局管理器（几何管理器），绘画的内容就是tkinter中的一个个小组件，一幅画由许多元素构成，而我们的GUI界面，就是有一个个组件拼装起来的，它们就是widget。 第二个，我们小时候都玩过积木，只要发挥创意，相同的积木可以堆出各种造型。tkinter的组件也可以看做一个个积木，形状或许不同，其本质都是一样的，就是一个积木，不管它长什么样子，它始终就是积木！所以这些小组件都有许多共性，另外，个人认为，学习界面编程，最重要的不是一开始学习每个积木的样子，不是学习每个组件怎么用，而是这些组件该怎么放。初始学习中，怎么放远远比怎么用重要的多。网上有大量的文章资料，基本全是介绍组件怎么用的，对于怎么放，也就是tkinter中的布局管理器，都是一笔带过，这对初学者有点本末倒置，或许绝大部分是转载的原因吧，极少是自己真正写的。组件怎么用不是最迫切的，用到的时候再去了解也不迟，边用边学反而更好。因此我将专门写一章，详细介绍布局管理器的使用。 三、Tkinter 控件详细介绍 1.Tkinter 模块元素简要说明 The Button WidgetThe Canvas WidgetThe Checkbutton WidgetThe Entry WidgetThe Frame WidgetThe Label WidgetThe LabelFrame WidgetThe Listbox WidgetThe Menu WidgetThe Menubutton WidgetThe Message WidgetThe OptionMenu WidgetThe PanedWindow WidgetThe Radiobutton WidgetThe Scale WidgetThe Scrollbar WidgetThe Spinbox WidgetThe Text WidgetThe Toplevel WidgetBasic Widget MethodsToplevel Window Methods 2.常用窗口部件及简要说明： Tkinter支持16个核心的窗口部件，这个16个核心窗口部件类简要描述如下： Button：一个简单的按钮，用来执行一个命令或别的操作 Canvas：组织图形。这个部件可以用来绘制图表和图，创建图形编辑器，实现定制窗口部件。 Checkbutton：代表一个变量，它有两个不同的值。点击这个按钮将会在这两个值间切换。 Entry：文本输入域。 Frame：一个容器窗口部件。帧可以有边框和背景，当创建一个应用程序或dialog(对话）版面时，帧被用来组织其它的窗口部件。 Label：显示一个文本或图象。 Listbox：显示供选方案的一个列表。listbox能够被配置来得到radiobutton或checklist的行为。 Menu：菜单条。用来实现下拉和弹出式菜单。 Menubutton：菜单按钮。用来实现下拉式菜单。 Message：显示一文本。类似label窗口部件，但是能够自动地调整文本到给定的宽度或比率。 Radiobutton：代表一个变量，它可以有多个值中的一个。点击它将为这个变量设置值，并且清除与这同一变量相关的其它radiobutton。 Scale：允许你通过滑块来设置一数字值。 Scrollbar：为配合使用canvas, entry, listbox, and text窗口部件的标准滚动条。 Text：格式化文本显示。允许你用不同的样式和属性来显示和编辑文本。同时支持内嵌图象和窗口。 Toplevel：一个容器窗口部件，作为一个单独的、最上面的窗口显示。 messageBox：消息框，用于显示你应用程序的消息框。(Python2中为tkMessagebox) 注意在Tkinter中窗口部件类没有分级；所有的窗口部件类在树中都是兄弟关系。 所有这些窗口部件提供了Misc和几何管理方法、配置管理方法和部件自己定义的另外的方法。此外，Toplevel类也提供窗口管理接口。这意味一个典型的窗口部件类提供了大约150种方法。 四、动手实践学习 1.创建主窗口及Label部件（标签）创建使用 我们要学习使用上面提到的这些控件首先要创建一个主窗口，就像作画一样，先要架好架子和画板，然后才能在上面放画纸和各种绘画元素，创建好主窗口才能在上面放置各种控件元素。而创建过程是很简单的，如下： 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上设定标签 l = tk.Label(window, text=&#39;你好！this is Tkinter&#39;, bg=&#39;green&#39;, font=(&#39;Arial&#39;, 12), width=30, height=2) # 说明： bg为背景，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高 # 第5步，放置标签 l.pack() # Label内容content区域放置位置，自动调节尺寸 # 放置lable的方法有：1）l.pack(); 2)l.place(); # 第6步，主窗口循环显示 window.mainloop() # 注意，loop因为是循环的意思，window.mainloop就会让window不断的刷新，如果没有mainloop,就是一个静态的window,传入进去的值就不会有循环，mainloop就相当于一个很大的while循环，有个while，每点击一次就会更新一次，所以我们必须要有循环 # 所有的窗口文件都必须有类似的mainloop函数，mainloop是窗口文件的关键的关键。 测试效果： 2.Button窗口部件 简单说明： Button（按钮）部件是一个标准的Tkinter窗口部件，用来实现各种按钮。按钮能够包含文本或图象，并且你能够将按钮与一个Python函数或方法相关联。当这个按钮被按下时，Tkinter自动调用相关联的函数或方法。 按钮仅能显示一种字体，但是这个文本可以跨行。另外，这个文本中的一个字母可以有下划线，例如标明一个快捷键。默认情况，Tab键用于将焦点移动到一个按钮部件。 什么时候用按钮部件 简言之，按钮部件用来让用户说“马上给我执行这个任务”，通常我们用显示在按钮上的文本或图象来提示。按钮通常用在工具条中或应用程序窗口中，并且用来接收或忽略输入在对话框中的数据。关于按钮和输入的数据的配合，可以参看Checkbutton和Radiobutton部件。 如何创建： 普通的按钮很容易被创建，仅仅指定按钮的内容（文本、位图、图象）和一个当按钮被按下时的回调函数即可： b = tk.Button(window, text=”hit me”, command=hit_me) 没有回调函数的按钮是没有用的，当你按下这个按钮时它什么也不做。你可能在开发一个应用程序的时候想实现这种按钮，比如为了不干扰你的beta版的测试者： b = tk.Button(window, text=”Help”, command=DISABLED) 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上设定标签 var = tk.StringVar() # 将label标签的内容设置为字符类型，用var来接收hit_me函数的传出内容用以显示在标签上 l = tk.Label(window, textvariable=var, bg=&#39;green&#39;, fg=&#39;white&#39;, font=(&#39;Arial&#39;, 12), width=30, height=2) # 说明： bg为背景，fg为字体颜色，font为字体，width为长，height为高，这里的长和高是字符的长和高，比如height=2,就是标签有2个字符这么高 l.pack() # 定义一个函数功能（内容自己自由编写），供点击Button按键时调用，调用命令参数command=函数名 on_hit = False def hit_me(): global on_hit if on_hit == False: on_hit = True var.set(&#39;you hit me&#39;) else: on_hit = False var.set(&#39;&#39;) # 第5步，在窗口界面设置放置Button按键 b = tk.Button(window, text=&#39;hit me&#39;, font=(&#39;Arial&#39;, 12), width=10, height=1, command=hit_me) b.pack() # 第6步，主窗口循环显示 window.mainloop() 测试效果： 3. Entry窗口部件 简单说明： Entry是tkinter类中提供的的一个单行文本输入域，用来输入显示一行文本，收集键盘输入(类似 HTML 中的 text)。 什么时候用： 需要用户输入用户信息时，比如我们平时使用软件、登录网页时，用户交互界面让我们登录账户信息等时候可以用到。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上设定输入框控件entry并放置控件 e1 = tk.Entry(window, show=&#39;*&#39;, font=(&#39;Arial&#39;, 14)) # 显示成密文形式 e2 = tk.Entry(window, show=None, font=(&#39;Arial&#39;, 14)) # 显示成明文形式 e1.pack() e2.pack() # 第5步，主窗口循环显示 window.mainloop() 测试效果： 4.Text窗口部件 简单说明： Text是tkinter类中提供的的一个多行文本区域，显示多行文本，可用来收集(或显示)用户输入的文字(类似 HTML 中的 textarea)，格式化文本显示，允许你用不同的样式和属性来显示和编辑文本，同时支持内嵌图象和窗口。 什么时候用： 在需要显示编辑用户、产品多行信息时，比如显示用户详细描述文字，产品简介等等，支持随时编辑。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上设定输入框控件entry框并放置 e = tk.Entry(window, show = None)#显示成明文形式 e.pack() # 第5步，定义两个触发事件时的函数insert_point和insert_end（注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面） def insert_point(): # 在鼠标焦点处插入输入内容 var = e.get() t.insert(&#39;insert&#39;, var) def insert_end(): # 在文本框内容最后接着插入输入内容 var = e.get() t.insert(&#39;end&#39;, var) # 第6步，创建并放置两个按钮分别触发两种情况 b1 = tk.Button(window, text=&#39;insert point&#39;, width=10, height=2, command=insert_point) b1.pack() b2 = tk.Button(window, text=&#39;insert end&#39;, width=10, height=2, command=insert_end) b2.pack() # 第7步，创建并放置一个多行文本框text用以显示，指定height=3为文本框是三个字符高度 t = tk.Text(window, height=3) t.pack() # 第8步，主窗口循环显示 window.mainloop() 测试效果： 5.Listbox窗口部件 简单说明： Text是tkinter类中提供的的列表框部件，显示供选方案的一个列表。listbox能够被配置来得到radiobutton或checklist的行为。 什么时候用： 在有一个很多内容选项组成的列表提供用户选择时会用到。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建一个标签label用以显示并放置 var1 = tk.StringVar() # 创建变量，用var1用来接收鼠标点击具体选项的内容 l = tk.Label(window, bg=&#39;green&#39;, fg=&#39;yellow&#39;,font=(&#39;Arial&#39;, 12), width=10, textvariable=var1) l.pack() # 第6步，创建一个方法用于按钮的点击事件 def print_selection(): value = lb.get(lb.curselection()) # 获取当前选中的文本 var1.set(value) # 为label设置值 # 第5步，创建一个按钮并放置，点击按钮调用print_selection函数 b1 = tk.Button(window, text=&#39;print selection&#39;, width=15, height=2, command=print_selection) b1.pack() # 第7步，创建Listbox并为其添加内容 var2 = tk.StringVar() var2.set((1,2,3,4)) # 为变量var2设置值 # 创建Listbox lb = tk.Listbox(window, listvariable=var2) #将var2的值赋给Listbox # 创建一个list并将值循环添加到Listbox控件中 list_items = [11,22,33,44] for item in list_items: lb.insert(&#39;end&#39;, item) # 从最后一个位置开始加入值 lb.insert(1, &#39;first&#39;) # 在第一个位置加入&#39;first&#39;字符 lb.insert(2, &#39;second&#39;) # 在第二个位置加入&#39;second&#39;字符 lb.delete(2) # 删除第二个位置的字符 lb.pack() # 第8步，主窗口循环显示 window.mainloop() 测试效果： 6.Radiobutton窗口部件 简单说明： Radiobutton：代表一个变量，它可以有多个值中的一个。点击它将为这个变量设置值，并且清除与这同一变量相关的其它radiobutton。 什么时候用： 在有一个很多内容选项组成的选项列表提供用户选择时会用到，用户一次只能选择其中一个，不能多选。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建一个标签label用以显示并放置 var = tk.StringVar() # 定义一个var用来将radiobutton的值和Label的值联系在一起. l = tk.Label(window, bg=&#39;yellow&#39;, width=20, text=&#39;empty&#39;) l.pack() # 第6步，定义选项触发函数功能 def print_selection(): l.config(text=&#39;you have selected &#39; + var.get()) # 第5步，创建三个radiobutton选项，其中variable=var, value=&#39;A&#39;的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable r1 = tk.Radiobutton(window, text=&#39;Option A&#39;, variable=var, value=&#39;A&#39;, command=print_selection) r1.pack() r2 = tk.Radiobutton(window, text=&#39;Option B&#39;, variable=var, value=&#39;B&#39;, command=print_selection) r2.pack() r3 = tk.Radiobutton(window, text=&#39;Option C&#39;, variable=var, value=&#39;C&#39;, command=print_selection) r3.pack() # 第7步，主窗口循环显示 window.mainloop() 测试效果： 7.Checkbutton窗口部件 简单说明： Checkbutton：代表一个变量，它有两个不同的值。点击这个按钮将会在这两个值间切换，选择和取消选择。 什么时候用： 在有一个很多内容选项组成的选项列表提供用户选择时会用到，用户一次可以选择多个。 **示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建一个标签label用以显示并放置 l = tk.Label(window, bg=&#39;yellow&#39;, width=20, text=&#39;empty&#39;) l.pack() # 第6步，定义触发函数功能 def print_selection(): if (var1.get() == 1) &amp; (var2.get() == 0): # 如果选中第一个选项，未选中第二个选项 l.config(text=&#39;I love only Python &#39;) elif (var1.get() == 0) &amp; (var2.get() == 1): # 如果选中第二个选项，未选中第一个选项 l.config(text=&#39;I love only C++&#39;) elif (var1.get() == 0) &amp; (var2.get() == 0): # 如果两个选项都未选中 l.config(text=&#39;I do not love either&#39;) else: l.config(text=&#39;I love both&#39;) # 如果两个选项都选中 # 第5步，定义两个Checkbutton选项并放置 var1 = tk.IntVar() # 定义var1和var2整型变量用来存放选择行为返回值 var2 = tk.IntVar() c1 = tk.Checkbutton(window, text=&#39;Python&#39;,variable=var1, onvalue=1, offvalue=0, command=print_selection) # 传值原理类似于radiobutton部件 c1.pack() c2 = tk.Checkbutton(window, text=&#39;C++&#39;,variable=var2, onvalue=1, offvalue=0, command=print_selection) c2.pack() # 第7步，主窗口循环显示 window.mainloop() 测试效果： 8.Scale窗口部件 简单说明： Scale： 尺度（拉动条），允许你通过滑块来设置一数字值。 什么时候用： 在需要用户给出评价等级，或者给出一个评价分数，或者拉动滑动条提供一个具体的数值等等。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建一个标签label用以显示并放置 l = tk.Label(window, bg=&#39;green&#39;, fg=&#39;white&#39;, width=20, text=&#39;empty&#39;) l.pack() # 第6步，定义一个触发函数功能 def print_selection(v): l.config(text=&#39;you have selected &#39; + v) # 第5步，创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0.01，触发调用print_selection函数 s = tk.Scale(window, label=&#39;try me&#39;, from_=0, to=10, orient=tk.HORIZONTAL, length=200, showvalue=0,tickinterval=2, resolution=0.01, command=print_selection) s.pack() # 第7步，主窗口循环显示 window.mainloop() 测试效果： 9.Canvas窗口部件 简单说明： Canvas：画布，提供绘图功能(直线、椭圆、多边形、矩形) 可以包含图形或位图，用来绘制图表和图，创建图形编辑器，实现定制窗口部件。 什么时候用： 在比如像用户交互界面等，需要提供设计的图标、图形、logo等信息是可以用到画布。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建 500 * 200 大小的画布并放置各种元素 canvas = tk.Canvas(window, bg=&#39;green&#39;, height=200, width=500) # 说明图片位置，并导入图片到画布上 image_file = tk.PhotoImage(file=&#39;pic.gif&#39;) # 图片位置（相对路径，与.py文件同一文件夹下，也可以用绝对路径，需要给定图片具体绝对路径） image = canvas.create_image(250, 0, anchor=&#39;n&#39;,image=image_file) # 图片锚定点（n图片顶端的中间点位置）放在画布（250,0）坐标处 # 定义多边形参数，然后在画布上画出指定图形 x0, y0, x1, y1 = 100, 100, 150, 150 line = canvas.create_line(x0-50, y0-50, x1-50, y1-50) # 画直线 oval = canvas.create_oval(x0+120, y0+50, x1+120, y1+50, fill=&#39;yellow&#39;) # 画圆 用黄色填充 arc = canvas.create_arc(x0, y0+50, x1, y1+50, start=0, extent=180) # 画扇形 从0度打开收到180度结束 rect = canvas.create_rectangle(330, 30, 330+20, 30+20) # 画矩形正方形 canvas.pack() # 第6步，触发函数，用来一定指定图形 def moveit(): canvas.move(rect, 2, 2) # 移动正方形rect（也可以改成其他图形名字用以移动一起图形、元素），按每次（x=2, y=2）步长进行移动 # 第5步，定义一个按钮用来移动指定图形的在画布上的位置 b = tk.Button(window, text=&#39;move item&#39;,command=moveit).pack() # 第7步，主窗口循环显示 window.mainloop() 所用图片： 当然你可以随意用你的一张图片导入画布试一试效果，图片可以用画图工具改一下像素大小，以免图片太大，导入画布显示不全，当然你也可以用我提供的素材，下面是链接：https://files.cnblogs.com/files/shwee/pic.gif 图片锚定点位置参数图： 测试效果： 10.Menu窗口部件 简单说明： Menu：菜单条，用来实现下拉和弹出式菜单，点下菜单后弹出的一个选项列表,用户可以从中选择 什么时候用： 在比如像软件或网页交互界面等，需要提供菜单选项功能提供用户选择菜单选项功能时用到。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建一个标签用以显示内容并放置 l = tk.Label(window, text=&#39; &#39;, bg=&#39;green&#39;) l.pack() # 第10步，定义一个函数功能，用来代表菜单选项的功能，这里为了操作简单，定义的功能比较简单 counter = 0 def do_job(): global counter l.config(text=&#39;do &#39;+ str(counter)) counter += 1 # 第5步，创建一个菜单栏，这里我们可以把他理解成一个容器，在窗口的上方 menubar = tk.Menu(window) # 第6步，创建一个File菜单项（默认不下拉，下拉内容包括New，Open，Save，Exit功能项） filemenu = tk.Menu(menubar, tearoff=0) # 将上面定义的空菜单命名为File，放在菜单栏中，就是装入那个容器中 menubar.add_cascade(label=&#39;File&#39;, menu=filemenu) # 在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单对应命令操作。 filemenu.add_command(label=&#39;New&#39;, command=do_job) filemenu.add_command(label=&#39;Open&#39;, command=do_job) filemenu.add_command(label=&#39;Save&#39;, command=do_job) filemenu.add_separator() # 添加一条分隔线 filemenu.add_command(label=&#39;Exit&#39;, command=window.quit) # 用tkinter里面自带的quit()函数 # 第7步，创建一个Edit菜单项（默认不下拉，下拉内容包括Cut，Copy，Paste功能项） editmenu = tk.Menu(menubar, tearoff=0) # 将上面定义的空菜单命名为 Edit，放在菜单栏中，就是装入那个容器中 menubar.add_cascade(label=&#39;Edit&#39;, menu=editmenu) # 同样的在 Edit 中加入Cut、Copy、Paste等小命令功能单元，如果点击这些单元, 就会触发do_job的功能 editmenu.add_command(label=&#39;Cut&#39;, command=do_job) editmenu.add_command(label=&#39;Copy&#39;, command=do_job) editmenu.add_command(label=&#39;Paste&#39;, command=do_job) # 第8步，创建第二级菜单，即菜单项里面的菜单 submenu = tk.Menu(filemenu) # 和上面定义菜单一样，不过此处实在File上创建一个空的菜单 filemenu.add_cascade(label=&#39;Import&#39;, menu=submenu, underline=0) # 给放入的菜单submenu命名为Import # 第9步，创建第三级菜单命令，即菜单项里面的菜单项里面的菜单命令（有点拗口，笑~~~） submenu.add_command(label=&#39;Submenu_1&#39;, command=do_job) # 这里和上面创建原理也一样，在Import菜单项中加入一个小菜单命令Submenu_1 # 第11步，创建菜单栏完成后，配置让菜单栏menubar显示出来 window.config(menu=menubar) # 第12步，主窗口循环显示 window.mainloop() 测试效果： 11.Frame 窗口部件 简单说明： Frame：框架，用来承载放置其他GUI元素，就是一个容器，是一个在 Windows 上分离小区域的部件, 它能将 Windows 分成不同的区,然后存放不同的其他部件. 同时一个 Frame 上也能再分成两个 Frame, Frame 可以认为是一种容器. 什么时候用： 在比如像软件或网页交互界面等，有不同的界面逻辑层级和功能区域划分时可以用到，让交互界面逻辑更加清晰。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，在图形界面上创建一个标签用以显示内容并放置 tk.Label(window, text=&#39;on the window&#39;, bg=&#39;red&#39;, font=(&#39;Arial&#39;, 16)).pack() # 和前面部件分开创建和放置不同，其实可以创建和放置一步完成 # 第5步，创建一个主frame，长在主window窗口上 frame = tk.Frame(window) frame.pack() # 第6步，创建第二层框架frame，长在主框架frame上面 frame_l = tk.Frame(frame)# 第二层frame，左frame，长在主frame上 frame_r = tk.Frame(frame)# 第二层frame，右frame，长在主frame上 frame_l.pack(side=&#39;left&#39;) frame_r.pack(side=&#39;right&#39;) # 第7步，创建三组标签，为第二层frame上面的内容，分为左区域和右区域，用不同颜色标识 tk.Label(frame_l, text=&#39;on the frame_l1&#39;, bg=&#39;green&#39;).pack() tk.Label(frame_l, text=&#39;on the frame_l2&#39;, bg=&#39;green&#39;).pack() tk.Label(frame_l, text=&#39;on the frame_l3&#39;, bg=&#39;green&#39;).pack() tk.Label(frame_r, text=&#39;on the frame_r1&#39;, bg=&#39;yellow&#39;).pack() tk.Label(frame_r, text=&#39;on the frame_r2&#39;, bg=&#39;yellow&#39;).pack() tk.Label(frame_r, text=&#39;on the frame_r3&#39;, bg=&#39;yellow&#39;).pack() # 第8步，主窗口循环显示 window.mainloop() 测试效果： 12.messageBox窗口部件 简单说明： messageBox：消息框，用于显示你应用程序的消息框。(Python2中为tkMessagebox)，其实这里的messageBox就是我们平时看到的弹窗。 我们首先需要定义一个触发功能，来触发这个弹窗，这里我们就放上以前学过的button按钮，通过触发功能，调用messagebox吧，点击button按钮就会弹出提示对话框。下面给出messagebox提示信息的几种形式： tkinter.messagebox.showinfo(title=&#39;Hi&#39;, message=&#39;你好！&#39;) # 提示信息对话窗 tkinter.messagebox.showwarning(title=&#39;Hi&#39;, message=&#39;有警告！&#39;) # 提出警告对话窗 tkinter.messagebox.showerror(title=&#39;Hi&#39;, message=&#39;出错了！&#39;) # 提出错误对话窗 print(tkinter.messagebox.askquestion(title=&#39;Hi&#39;, message=&#39;你好！&#39;)) # 询问选择对话窗return &#39;yes&#39;, &#39;no&#39; print(tkinter.messagebox.askyesno(title=&#39;Hi&#39;, message=&#39;你好！&#39;)) # return &#39;True&#39;, &#39;False&#39; print(tkinter.messagebox.askokcancel(title=&#39;Hi&#39;, message=&#39;你好！&#39;)) # return &#39;True&#39;, &#39;False&#39; 什么时候用： 在比如像软件或网页交互界面等，有不同的界面逻辑层级和功能区域划分时可以用到，让交互界面逻辑更加清晰。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 import tkinter.messagebox # 要使用messagebox先要导入模块 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第5步，定义触发函数功能 def hit_me(): tkinter.messagebox.showinfo(title=&#39;Hi&#39;, message=&#39;你好！&#39;) # 提示信息对话窗 # tkinter.messagebox.showwarning(title=&#39;Hi&#39;, message=&#39;有警告！&#39;) # 提出警告对话窗 # tkinter.messagebox.showerror(title=&#39;Hi&#39;, message=&#39;出错了！&#39;) # 提出错误对话窗 # print(tkinter.messagebox.askquestion(title=&#39;Hi&#39;, message=&#39;你好！&#39;)) # 询问选择对话窗return &#39;yes&#39;, &#39;no&#39; # print(tkinter.messagebox.askyesno(title=&#39;Hi&#39;, message=&#39;你好！&#39;)) # return &#39;True&#39;, &#39;False&#39; # print(tkinter.messagebox.askokcancel(title=&#39;Hi&#39;, message=&#39;你好！&#39;)) # return &#39;True&#39;, &#39;False&#39; # 第4步，在图形界面上创建一个标签用以显示内容并放置 tk.Button(window, text=&#39;hit me&#39;, bg=&#39;green&#39;, font=(&#39;Arial&#39;, 14), command=hit_me).pack() # 第6步，主窗口循环显示 window.mainloop() 测试效果： 13.窗口部件三种放置方式pack/grid/place参考来源： The Grid Geometry Manager The Pack Geometry Manager The Place Geometry Manager 1.Grid：The Grid Geometry Manager grid 是方格, 所以所有的内容会被放在这些规律的方格中。例如： for i in range(3): for j in range(3): tk.Label(window, text=1).grid(row=i, column=j, padx=10, pady=10, ipadx=10, ipady=10) 以上的代码就是创建一个三行三列的表格，其实 grid 就是用表格的形式定位的。这里的参数 row 为行，colum 为列，padx 就是单元格左右间距，pady 就是单元格上下间距，ipadx是单元格内部元素与单元格的左右间距，ipady是单元格内部元素与单元格的上下间距。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，grid 放置方法 for i in range(3): for j in range(3): tk.Label(window, text=1).grid(row=i, column=j, padx=10, pady=10, ipadx=10, ipady=10) # 第5步，主窗口循环显示 window.mainloop() 测试效果： 2.Pack：The Pack Geometry Manager 我们常用的pack(), 他会按照上下左右的方式排列.例如： tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;top&#39;) # 上 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;bottom&#39;) # 下 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;left&#39;) # 左 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;right&#39;) # 右 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，pack 放置方法 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;top&#39;) # 上 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;bottom&#39;) # 下 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;left&#39;) # 左 tk.Label(window, text=&#39;P&#39;, fg=&#39;red&#39;).pack(side=&#39;right&#39;) # 右 # 第5步，主窗口循环显示 window.mainloop() 测试效果： 3.Place：The Place Geometry Manager 再接下来我们来看place(), 这个比较容易理解，就是给精确的坐标来定位，如此处给的(50, 100)，就是将这个部件放在坐标为(x=50, y=100)的这个位置, 后面的参数 anchor=’nw’，就是前面所讲的锚定点是西北角。例如： tk.Label(window, text=&#39;Pl&#39;, font=(&#39;Arial&#39;, 20), ).place(x=50, y=100, anchor=&#39;nw&#39;) 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;My Window&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;500x300&#39;) # 这里的乘是小x # 第4步，place 放置方法（精准的放置到指定坐标点的位置上） tk.Label(window, text=&#39;Pl&#39;, font=(&#39;Arial&#39;, 20), ).place(x=50, y=100, anchor=&#39;nw&#39;) # 第5步，主窗口循环显示 window.mainloop() 测试效果： 14.综合练习，用户登录窗口例子 编写一个用户登录界面，用户可以登录账户信息，如果账户已经存在，可以直接登录，登录名或者登录密码输入错误会提示，如果账户不存在，提示用户注册，点击注册进去注册页面，输入注册信息，确定后便可以返回登录界面进行登录。 示例代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # author:洪卫 import tkinter as tk # 使用Tkinter前需要先导入 import tkinter.messagebox import pickle # 第1步，实例化object，建立窗口window window = tk.Tk() # 第2步，给窗口的可视化起名字 window.title(&#39;Wellcome to Hongwei Website&#39;) # 第3步，设定窗口的大小(长 * 宽) window.geometry(&#39;400x300&#39;) # 这里的乘是小x # 第4步，加载 wellcome image canvas = tk.Canvas(window, width=400, height=135, bg=&#39;green&#39;) image_file = tk.PhotoImage(file=&#39;pic.gif&#39;) image = canvas.create_image(200, 0, anchor=&#39;n&#39;, image=image_file) canvas.pack(side=&#39;top&#39;) tk.Label(window, text=&#39;Wellcome&#39;,font=(&#39;Arial&#39;, 16)).pack() # 第5步，用户信息 tk.Label(window, text=&#39;User name:&#39;, font=(&#39;Arial&#39;, 14)).place(x=10, y=170) tk.Label(window, text=&#39;Password:&#39;, font=(&#39;Arial&#39;, 14)).place(x=10, y=210) # 第6步，用户登录输入框entry # 用户名 var_usr_name = tk.StringVar() var_usr_name.set(&#39;example@python.com&#39;) entry_usr_name = tk.Entry(window, textvariable=var_usr_name, font=(&#39;Arial&#39;, 14)) entry_usr_name.place(x=120,y=175) # 用户密码 var_usr_pwd = tk.StringVar() entry_usr_pwd = tk.Entry(window, textvariable=var_usr_pwd, font=(&#39;Arial&#39;, 14), show=&#39;*&#39;) entry_usr_pwd.place(x=120,y=215) # 第8步，定义用户登录功能 def usr_login(): # 这两行代码就是获取用户输入的usr_name和usr_pwd usr_name = var_usr_name.get() usr_pwd = var_usr_pwd.get() # 这里设置异常捕获，当我们第一次访问用户信息文件时是不存在的，所以这里设置异常捕获。 # 中间的两行就是我们的匹配，即程序将输入的信息和文件中的信息匹配。 try: with open(&#39;usrs_info.pickle&#39;, &#39;rb&#39;) as usr_file: usrs_info = pickle.load(usr_file) except FileNotFoundError: # 这里就是我们在没有读取到`usr_file`的时候，程序会创建一个`usr_file`这个文件，并将管理员 # 的用户和密码写入，即用户名为`admin`密码为`admin`。 with open(&#39;usrs_info.pickle&#39;, &#39;wb&#39;) as usr_file: usrs_info = {&#39;admin&#39;: &#39;admin&#39;} pickle.dump(usrs_info, usr_file) usr_file.close() # 必须先关闭，否则pickle.load()会出现EOFError: Ran out of input # 如果用户名和密码与文件中的匹配成功，则会登录成功，并跳出弹窗how are you? 加上你的用户名。 if usr_name in usrs_info: if usr_pwd == usrs_info[usr_name]: tkinter.messagebox.showinfo(title=&#39;Welcome&#39;, message=&#39;How are you? &#39; + usr_name) # 如果用户名匹配成功，而密码输入错误，则会弹出&#39;Error, your password is wrong, try again.&#39; else: tkinter.messagebox.showerror(message=&#39;Error, your password is wrong, try again.&#39;) else: # 如果发现用户名不存在 is_sign_up = tkinter.messagebox.askyesno(&#39;Welcome！ &#39;, &#39;You have not sign up yet. Sign up now?&#39;) # 提示需不需要注册新用户 if is_sign_up: usr_sign_up() # 第9步，定义用户注册功能 def usr_sign_up(): def sign_to_Hongwei_Website(): # 以下三行就是获取我们注册时所输入的信息 np = new_pwd.get() npf = new_pwd_confirm.get() nn = new_name.get() # 这里是打开我们记录数据的文件，将注册信息读出 with open(&#39;usrs_info.pickle&#39;, &#39;rb&#39;) as usr_file: exist_usr_info = pickle.load(usr_file) # 这里就是判断，如果两次密码输入不一致，则提示Error, Password and confirm password must be the same! if np != npf: tkinter.messagebox.showerror(&#39;Error&#39;, &#39;Password and confirm password must be the same!&#39;) # 如果用户名已经在我们的数据文件中，则提示Error, The user has already signed up! elif nn in exist_usr_info: tkinter.messagebox.showerror(&#39;Error&#39;, &#39;The user has already signed up!&#39;) # 最后如果输入无以上错误，则将注册输入的信息记录到文件当中，并提示注册成功Welcome！,You have successfully signed up!，然后销毁窗口。 else: exist_usr_info[nn] = np with open(&#39;usrs_info.pickle&#39;, &#39;wb&#39;) as usr_file: pickle.dump(exist_usr_info, usr_file) tkinter.messagebox.showinfo(&#39;Welcome&#39;, &#39;You have successfully signed up!&#39;) # 然后销毁窗口。 window_sign_up.destroy() # 定义长在窗口上的窗口 window_sign_up = tk.Toplevel(window) window_sign_up.geometry(&#39;300x200&#39;) window_sign_up.title(&#39;Sign up window&#39;) new_name = tk.StringVar() # 将输入的注册名赋值给变量 new_name.set(&#39;example@python.com&#39;) # 将最初显示定为&#39;example@python.com&#39; tk.Label(window_sign_up, text=&#39;User name: &#39;).place(x=10, y=10) # 将`User name:`放置在坐标（10,10）。 entry_new_name = tk.Entry(window_sign_up, textvariable=new_name) # 创建一个注册名的`entry`，变量为`new_name` entry_new_name.place(x=130, y=10) # `entry`放置在坐标（150,10）. new_pwd = tk.StringVar() tk.Label(window_sign_up, text=&#39;Password: &#39;).place(x=10, y=50) entry_usr_pwd = tk.Entry(window_sign_up, textvariable=new_pwd, show=&#39;*&#39;) entry_usr_pwd.place(x=130, y=50) new_pwd_confirm = tk.StringVar() tk.Label(window_sign_up, text=&#39;Confirm password: &#39;).place(x=10, y=90) entry_usr_pwd_confirm = tk.Entry(window_sign_up, textvariable=new_pwd_confirm, show=&#39;*&#39;) entry_usr_pwd_confirm.place(x=130, y=90) # 下面的 sign_to_Hongwei_Website btn_comfirm_sign_up = tk.Button(window_sign_up, text=&#39;Sign up&#39;, command=sign_to_Hongwei_Website) btn_comfirm_sign_up.place(x=180, y=120) # 第7步，login and sign up 按钮 btn_login = tk.Button(window, text=&#39;Login&#39;, command=usr_login) btn_login.place(x=120, y=240) btn_sign_up = tk.Button(window, text=&#39;Sign up&#39;, command=usr_sign_up) btn_sign_up.place(x=200, y=240) # 第10步，主窗口循环显示 window.mainloop() 测试效果： 15.其他部件后续再补充… 注：不同电脑可能配置环境略有不同，如有小错误可以自己调试一下。","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"Tutorial","slug":"Tutorial","permalink":"https://sunhwee.github.io/tags/Tutorial/"},{"name":"Python","slug":"Python","permalink":"https://sunhwee.github.io/tags/Python/"},{"name":"GUI","slug":"GUI","permalink":"https://sunhwee.github.io/tags/GUI/"},{"name":"TKinter","slug":"TKinter","permalink":"https://sunhwee.github.io/tags/TKinter/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"各类软件常用命令","slug":"software-commands","date":"2019-08-15T06:25:59.000Z","updated":"2019-08-21T11:40:22.882Z","comments":true,"path":"2019/08/15/software-commands/","link":"","permalink":"https://sunhwee.github.io/2019/08/15/software-commands/","excerpt":"","text":"这篇博客笔记用来记录各类软件常用命令和使用技巧，持续更新… Git 常用命令 1.常用 git config --global core.editor vim # 设置默认编辑器为vim（git默认用nano） git config core.ignorecase false # 设置大小写敏感 git config --global user.name &quot;YOUR NAME&quot; # 设置用户名 git config --global user.email &quot;YOUR EMAIL ADDRESS&quot; # 设置邮箱 git clone &lt;url&gt; # 克隆远程版本库 git init # 初始化本地版本库 git remote add origin git@github.com:shw2018/test.git # 配置远程git版本库 git pull origin master # 下载代码及快速合并 git push origin master # 上传代码及快速合并 git fetch origin # 从远程库获取代码 git branch # 显示所有分支 git checkout master # 切换到master分支 git checkout -b dev # 创建并切换到dev分支 git commit -m &quot;first version&quot; # 提交 git status # 查看状态 git log # 查看提交历史 2.别名Alias git config --global alias.br=&quot;branch&quot; # 创建/查看本地分支 git config --global alias.co=&quot;checkout&quot; # 切换分支 git config --global alias.cb=&quot;checkout -b&quot; # 创建并切换到新分支 git config --global alias.cm=&quot;commit -m&quot; # 提交 git config --global alias.st=&quot;status&quot; # 查看状态 git config --global alias.pullm=&quot;pull origin master&quot; # 拉取分支 git config --global alias.pushm=&quot;push origin master&quot; # 提交分支 git config --global alias.log=&quot;git log --oneline --graph --decorate --color=always&quot; # 单行、分颜色显示记录 git config --global alias.logg=&quot;git log --graph --all --format=format:&#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)&#39; --abbrev-commit --date=relative&quot; # 复杂显示 3.创建版本库 git clone &lt;url&gt; # 克隆远程版本库 git init # 初始化本地版本库 4.修改和提交 git status # 查看状态 git diff # 查看变更内容 git add . # 跟踪所有改动过的文件 git add &lt;file&gt; # 跟踪指定的文件 git mv &lt;old&gt; &lt;new&gt; # 文件改名 git rm &lt;file&gt; # 删除文件 git rm --cached &lt;file&gt; # 停止跟踪文件但不删除 git commit -m “commit message” # 提交所有更新过的文件 git commit --amend # 修改最后一次提交 5.查看提交历史 git log # 查看提交历史 git log -p &lt;file&gt; # 查看指定文件的提交历史 git blame &lt;file&gt; # 以列表方式查看指定文件的提交历史 6.撤消与回退 git reset --hard HEAD # 撤消工作目录中所有未提交文件的修改内容 git reset --hard &lt;version&gt; # 撤销到某个特定版本 git checkout HEAD &lt;file&gt; # 撤消指定的未提交文件的修改内容 git checkout -- &lt;file&gt; # 同上一个命令 git revert &lt;commit&gt; # 撤消指定的提交 7.分支与标签 git branch # 显示所有本地分支 git checkout &lt;branch/tag&gt; # 切换到指定分支或标签 git branch &lt;new-branch&gt; # 创建新分支 git branch -d &lt;branch&gt; # 删除本地分支 git tag # 列出所有本地标签 git tag &lt;tagname&gt; # 基于最新提交创建标签 git tag -a &quot;v1.0&quot; -m &quot;一些说明&quot; # -a指定标签名称，-m指定标签说明 git tag -d &lt;tagname&gt; # 删除标签 git checkout dev # 合并特定的commit到dev分支上 git cherry-pick 62ecb3 8.合并与衍合 git merge &lt;branch&gt; # 合并指定分支到当前分支 git merge --abort # 取消当前合并，重建合并前状态 git merge dev -Xtheirs # 以合并dev分支到当前分支，有冲突则以dev分支为准 git rebase &lt;branch&gt; # 衍合指定分支到当前分支 9.远程操作 git remote -v # 查看远程版本库信息 git remote show &lt;remote&gt; # 查看指定远程版本库信息 git remote add &lt;remote&gt; &lt;url&gt; # 添加远程版本库 git remote remove &lt;remote&gt; # 删除指定的远程版本库 git fetch &lt;remote&gt; # 从远程库获取代码 git pull &lt;remote&gt; &lt;branch&gt; # 下载代码及快速合并 git push &lt;remote&gt; &lt;branch&gt; # 上传代码及快速合并 git push &lt;remote&gt; :&lt;branch/tag-name&gt; # 删除远程分支或标签 git push --tags # 上传所有标签 10.打包 git archive --format=zip --output ../file.zip master # 将master分支打包成file.zip文件，保存在上一级目录 git archive --format=zip --output ../v1.2.zip v1.2 # 打包v1.2标签的文件，保存在上一级目录v1.2.zip文件中 git archive --format=zip v1.2 &gt; ../v1.2.zip # 作用同上一条命令 git打包命令会自动忽略.gitignore中指定的目录和文件，以及.git目录。 11.全局和局部配置 全局配置保存在：$Home/.gitconfig 本地仓库配置保存在：.git/config 12.远程与本地合并 如果在远程创建了代码仓，而且已经初始化，本地是具体的源代码，那么工作流程应该是： git init # 初始化本地代码仓 git add . # 添加本地代码 git commit -m &quot;add local source&quot; # 提交本地代码 git pull origin master # 下载远程代码 git merge master # 合并master分支 git push -u origin master # 上传代码","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"Software","slug":"Software","permalink":"https://sunhwee.github.io/tags/Software/"},{"name":"Commands","slug":"Commands","permalink":"https://sunhwee.github.io/tags/Commands/"},{"name":"常用命令","slug":"常用命令","permalink":"https://sunhwee.github.io/tags/常用命令/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"常用软件bug调试与使用tips","slug":"softwares-bug-tips","date":"2019-08-12T08:42:05.000Z","updated":"2019-08-21T11:25:15.740Z","comments":true,"path":"2019/08/12/softwares-bug-tips/","link":"","permalink":"https://sunhwee.github.io/2019/08/12/softwares-bug-tips/","excerpt":"","text":"Ubuntu18.04 安装 Visual Studio Code出现问题的解决 一、前述关于ubuntu安装Visual Studio Code这里不在说明。这里记录两点自己安装过程中遇到的问题。 二、umake安装出现问题解决usage: umake web [-h] {firefox-dev,phantomjs} ... umake web: error: argument framework: invalid choice: &#39;visual-studio-code&#39; 安装不是用web进行安装的，网上好多教程都是使用这种方式，只要修改为ide即可： sudo umake ide visual-studio-code 三、安装完成后打不开vscode或者说打开闪退问题解决cd ~/.config sudo rm -rf ./Code/ vscode的配置文件被root用户加上了权限，把权限去除即可。 四、vscode安装插件出现安装插件时，发现点击“install”,右下角会提示“failed to install”，这是因为vscode的扩展文件夹没有用户权限，命令行中添加如下代码即可： sudo chown -R 你的用户名 ~/.vscode/extensions 目前就遇到两个问题，有其他问题在陆续更新。。。 linux下安装nodejs并配置全局变量 linux：命令行安装： sudo apt-get install nodejs sudo apt-get install npm 不过不推荐命令行安装，有时候有问题，建议直接到官网去下载编译好的压缩文件，如下所示:，然后解压到你指定的文件夹即可，比如我解压到我系统的/home/shw/MySoftwares目录下了，如图: 注意本压缩包是.tar.xz格式的，需要两次解压 配置一下环境变量 sudo vim /etc/profile 复制下面两行到刚打开的profile文件最底部(注意node的安装地址/home/shw/MySoftwares/node-v12.8.0-linux-x64换成自己的)： export NODE_HOME=/home/shw/MySoftwares/node-v12.8.0-linux-x64 export PATH=$PATH:$NODE_HOME/bin 保存后退出，再执行下面命令将环境变量生效： source /etc/profile 将目录软链接到全局环境下（命令后面的/usr/local/bin/node是固定的） sudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/node /usr/local/bin/node sudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/npm /usr/local/bin/npm 这样安装好了以后使用npm安装的包(比如：ionic serve)，使用包的命令时可能会提示找不到命令，没关系，在用户目录下终端执行下面命令(固定写法)： echo -e &quot;export PATH=$(npm prefix -g)/bin:$PATH&quot; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc 这样我们在所有用户下，都可以使用npm，也可以使用npm安装的包的命令。成功的将nodejs安装并配置到全局环境下。 安装完后，打开命令行终端，输入: node -v npm -v 检查一下有没有安装成功 添加国内镜像源 如果没有梯子的话，可以使用阿里的国内镜像进行加速。 npm config set registry https://registry.npm.taobao.org Ubuntu安装 扩展名为 .Appimage 的文件 首先该文件是不需要安装的,标题只是我自己当初Google的时候的搜索. 第一次使用,反正我没在百度找到解决办法,还是Google搜索出来了一个链接: 右键文件 –&gt; 属性 –&gt; 权限 –&gt; 允许作为程序执行文件 双击直接运行就是了。 详情可见：Appimage","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"Softwares","slug":"Softwares","permalink":"https://sunhwee.github.io/tags/Softwares/"},{"name":"Bugs","slug":"Bugs","permalink":"https://sunhwee.github.io/tags/Bugs/"},{"name":"常用软件","slug":"常用软件","permalink":"https://sunhwee.github.io/tags/常用软件/"},{"name":"Tips","slug":"Tips","permalink":"https://sunhwee.github.io/tags/Tips/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"Hexo+Github博客搭建记录","slug":"Hexo-Blog-Tutorial","date":"2019-08-10T13:44:44.000Z","updated":"2019-08-21T11:24:56.596Z","comments":true,"path":"2019/08/10/Hexo-Blog-Tutorial/","link":"","permalink":"https://sunhwee.github.io/2019/08/10/Hexo-Blog-Tutorial/","excerpt":"","text":"阅读须知 注意，这篇文章篇幅较长，主要针对新手，每一步很详细，所以可能会显得比较啰嗦，所以建议基础比较好小伙伴根据目录选择自己感兴趣的部分跳着看，不要文章没看，上来先喷一下！谢谢( ⊙ o ⊙ ) 前言 去年在博客园注册了自己的第一个博客，当时初衷就是想拿来作为自己的在线笔记本，做做学习记录，分享一些学到的东西，使用第三方提供的博客服务其实也挺方便，现在市面上提供类似服务的博客网站也很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。但是缺点是比较不自由，会受到平台的各种限制和恶心的广告，个性化不足。而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，也是没有这样的精力和时间。那么，我们能不能自己定制一个自己喜欢的个性化博客，同时也不用付出太高的成本啦？ 这就引出了第三种选择，基于开源框架搭建博客，然后直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，基于这个想法，今年8月初的时候开始搭建第一个属于自己的独立博客，前后断续弄了近一周，到现在稍微有点模样了。我想可能有很多小伙伴应该也想过搭建一个自己的博客，当然，网上也有一堆详细教程。写这篇博客的目的大概有两个，第一个是当做自己的搭建记录，方便以后自己随时查看提示修改，第二个是稍稍总结一下具体的搭建步骤以及一些支持个性化定制的博客源码修改的教程，稍稍分享一下这些修改经验，当然，更多的一些个性化操作需要你自己以后在这个基础上慢慢去摸索，有些写的不太好的地方还希望看到的小伙伴多多包涵。 博客初步的页面效果可以参观一下我的博客：sunhwee.com，欢迎大家支持。 本博客基于Hexo，所以首先要了解一下我们搭建博客所要用到的框架。Hexo是高效的静态网站生成框架，它基于Node.js，快速，简单且功能强大，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到github或者coding等代码管理托管平台，然后别人就可以浏览你的博客网页啦。是不是很简单？你无需关心网页源代码的具体生成细节，只需要用心写好你的博客文章内容就行了。 简单总结：Hexo, 产品成熟，使用简单，功能强大，有丰富的各种插件资源；但，像发布后台、站内搜索，评论系统类似诉求，虽然有对应的工具，但也需要自己折腾下，后续我们一步一步介绍。 教程大致分三个部分， 第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。 第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流 第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。 第一部分 搭建 hexo的初级搭建还有部署到github page上，以及个人域名的绑定。 Hexo搭建步骤 1.安装Git 2.安装Node.js 3.安装Hexo 4.GitHub创建个人仓库 5.生成SSH添加到GitHub 6.将hexo部署到GitHub 7.设置个人域名 8.发布文章 1. 安装Git 为了把本地的网页文件上传到github上面去，需要用到工具———Git[下载地址]。Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git非常强大，建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以看一下。Git教程 windows：到git官网上下载.exe文件,Download git,安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。 顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码 sudo apt-get install git 安装完成后在命令提示符中输入git --version来查看一下版本验证是否安装成功。 2. 安装nodejs Hexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows：下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击Next。最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。 linux：命令行安装： sudo apt-get install nodejs sudo apt-get install npm 不过不推荐命令行安装，有时候有问题，建议直接到官网去下载编译好的压缩文件，如下所示:，然后解压到你指定的文件夹即可，比如我解压到我系统的/home/shw/MySoftwares目录下了，如图: 注意本压缩包是.tar.xz格式的，需要两次解压 配置一下环境变量 sudo vim /etc/profile 复制下面两行到刚打开的profile文件最底部(注意node的安装地址/home/shw/MySoftwares/node-v12.8.0-linux-x64换成自己的)： export NODE_HOME=/home/shw/MySoftwares/node-v12.8.0-linux-x64 export PATH=$PATH:$NODE_HOME/bin 保存后退出，再执行下面命令将环境变量生效： source /etc/profile 将目录软链接到全局环境下（命令后面的/usr/local/bin/node是固定的） sudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/node /usr/local/bin/node sudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/npm /usr/local/bin/npm 这样安装好了以后使用npm安装的包(比如：ionic serve)，使用包的命令时可能会提示找不到命令，没关系，在用户目录下终端执行下面命令(固定写法)： echo -e &quot;export PATH=$(npm prefix -g)/bin:$PATH&quot; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc 这样我们在所有用户下，都可以使用npm，也可以使用npm安装的包的命令。成功的将nodejs安装并配置到全局环境下。 安装完后，打开命令行终端，输入: node -v npm -v 检查一下有没有安装成功 添加国内镜像源如果没有梯子的话，可以使用阿里的国内镜像进行加速。 npm config set registry https://registry.npm.taobao.org 3. 安装Hexo 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 比如我的博客文件都存放在D:\\Study\\MyBlog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，无视它就行。 npm install -g hexo-cli 安装完后输入hexo -v验证是否安装成功。 至此hexo就安装完了。 接下来初始化一下hexo,即初始化我们的网站，输入hexo init初始化文件夹 hexo init MyBlog 这个MyBlog可以自己取什么名字都行，然后，接着输入npm install安装必备的组件。 cd MyBlog //进入这个MyBlog文件夹 npm install 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器， hexo g hexo server(或者简写:hexo s）) 然后浏览器打开http://localhost:4000/，就可以看到我们的博客啦，效果如下： 按ctrl+c关闭本地服务器。 4. 注册Github账号创建个人仓库 接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。 打开https://github.com/，新建一个项目仓库New repository，如下所示：然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上。 要创建一个和你用户名相同的仓库，后面加.http://github.io，只有这样，将来要部署到`GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册GitHub`的用户名。例如我的：http://shw2018.github.io 5. 生成SSH添加到GitHub 生成SSH添加到GitHub，连接Github与本地。右键打开git bash，然后输入下面命令： git config --global user.name &quot;yourname&quot; git config --global user.email &quot;youremail&quot; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。例如我的： git config --global user.name &quot;shw2018&quot; git config --global user.email &quot;hwsun@std.uestc.edu.cn&quot; 可以用以下两条，检查一下你有没有输对 git config user.name git config user.email 然后创建SSH,一路回车 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 ssh-keygen -t rsa -C &quot;youremail&quot; 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。或者git bash中输入 cat ~/.ssh/id_rsa.pub 将输出的内容复制到框中，点击确定保存。 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。如图： 在git bash输入ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 6. 将hexo部署到GitHub 这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。 修改最后一行的配置： deploy: type: git repository: https://github.com/shw2018/shw2018.github.io branch: master repository修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 npm install hexo-deployer-git --save 然后 hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate顾名思义，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 7. 设置个人域名 现在你的个人网站的地址是yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。 不过，这一步不是必要的，如果目前还不想买域名可以先跳过，继续看后面的，以后想买域名了在还看这块 首先你得购买一个专属域名，xx云都能买，看你个人喜好了。 这篇以腾讯云为例，腾讯云官网购买：然后实名认证后进入腾讯云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，如下图所示： 然后打开你的github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名，保存： 这时候你的项目根目录应该会出现一个名为CNAME的文件了。如果没有的话，打开你本地博客/source目录，我的是D:\\Study\\MyBlog\\source，新建CNAME文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行hexo g、hexo d上传到github。 过不了多久，再打开你的浏览器，输入你自己的专属域名，就可以看到搭建的网站啦！ 8. 写文章、发布文章 首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。 然后输入hexo new post &quot;article title&quot;，新建一篇文章。 然后打开D:\\Study\\MyBlog\\source\\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。你可以会直接在vscode里面编写markdown文件，可以实时预览，也可以用用其他编辑md文件的软件的工具编写。编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。 到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。 第二部分 定制 我们要定制自己的博客的话，首先就要来了解一下Hexo博客的一些目录和文件的作用，以及如何平滑更换漂亮的主题模板并加入自己的定制源代码实现个性化定制 1. Hexo相关目录文件1.1 博客目录构成介绍 从上图可以看出，博客的目录结构如下： - node_modules - public - scaffolds - source - _data - _posts - about - archives - categories - friends - tags - themes node_modules是node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。 我们平时写文章只需要关注source/_posts这个文件夹就行了。 1.2 hexo基本配置 在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 1.2.1 网站 参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 1.2.2 网址 参数描述url网址root网站根目录 permalink文章的永久链接格式permalink_defaults永久链接中各部分的默认值 在这里，你需要把url改成你的网站域名。 permalink，也就是你生成某个文章时的那个链接格式。 比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是http://yoursite.com/2018/09/05/temp。 以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。 参数结果:year/:month/:day/:title/2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo/bar/hello-world 再往下翻，中间这些都默认就好了。 theme: landscap theme就是选择什么主题，也就是在themes这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在themes文件夹下，再修改这个主题参数就可以了。 1.2.3 Front-matter Front-matter 是md文件最上方以 ---分隔的区域，用于指定个别文件的变量，举例来说： title: Hexo+Github博客搭建记录 date: 2019-08-10 21:44:44 下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数描述layout布局title标题date建立日期updated更新日期comments开启文章的评论功能tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址 其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说Foo，Bar不等于Bar，Foo；而标签没有顺序和层次。 --- title: Hexo+Github博客搭建记录 date: 2019-08-10 21:44:44 author: 洪卫 img: /medias/banner/7.jpg coverImg: /medias/banner/7.jpg top: true cover: true toc: true password: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110 mathjax: true summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 tags: - Hexo - Github - 博客 categories: - 软件安装与配置 --- 1.2.4 layout（布局） 1.2.4.1 post 当你每一次使用代码 hexo new XXX 它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。 Hexo有三种默认布局：post、page和draft，它们分别对应不同的路径，而您自定义的其他布局和post相同，都将储存到source/_posts文件夹。 而new这个命令其实是： hexo new [layout] &lt;title&gt; 只不过这个layout默认是post罢了。 1.2.4.2 page 如果你想另起一页，那么可以使用 hexo new page newpage 系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是http://xxx.xxx/newpage 1.2.4.3 draft draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 hexo new draft newdraft 这样会在source/_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 hexo server --draft 在本地端口中开启服务预览。 如果你的草稿文件写完了，想要发表到post中， hexo publish draft newdraft 就会自动把newdraft.md发送到post中。 2. 更换主题 我们在了解Hexo博客文件基础之后，知道主题文件就放在themes文件下，那么我们就可以去Hexo官网下载喜欢的主题，复制进去然后修改参数即可。网上大多数主题都是github排名第一的Next主题，但是我个人不是很喜欢，我在网上看到一个主题感觉还不错：hexo-theme-matery，地址在传送门。这个主题看着比较漂亮，并且响应式比较友好，点起来很舒服，功能也比较很多。 当然，人各有异，这个主题风格也不一定是你喜欢，那么你也可以跟着这教程类似的方法替换成你喜欢的就行了。 特性： 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 他的介绍文档写得非常的详细，还有中英文两个版本。效果图如下： 首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。不过有些地方有些地方可以根据你自己的习惯和喜好修改一下， 下面记录一下我这个博客修改了的一些地方。 2.1 新建文章模板修改 首先为了新建文章方便，我们可以修改一下文章模板，建议将/scaffolds/post.md修改为如下代码： --- title: {{ title }} date: {{ date }} author: img: coverImg: top: false cover: false toc: true mathjax: false password: summary: tags: categories: --- 这样新建文章后 一些Front-matter参数不用你自己补充了，修改对应信息就可以了。 2.2 添加404页面 原来的主题没有404页面，我们加一个。首先在/source/目录下新建一个404.md，内容如下： title: 404 date: 2019-08-5 16:41:10 type: &quot;404&quot; layout: &quot;404&quot; description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot; 然后在/themes/matery/layout/目录下新建一个404.ejs文件，内容如下： &lt;style type=&quot;text/css&quot;&gt; /* don&#39;t remove. */ .about-cover { height: 75vh; } &lt;/style&gt; &lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt; &lt;div class=&quot;brand&quot;&gt; &lt;div class=&quot;title center-align&quot;&gt; 404 &lt;/div&gt; &lt;div class=&quot;description center-align&quot;&gt; &lt;%= page.description %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // 每天切换 banner 图. Switch banner image every day. $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;); &lt;/script&gt; 2.3“关于”页面增加简历（可选） 修改/themes/matery/layout/about.ejs，找到&lt;div class=&quot;card&quot;&gt;标签，然后找到它对应的&lt;/div&gt;标签，接在后面新增一个card，语句如下： &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;div class=&quot;card-content article-card-content&quot;&gt; &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt; &lt;i class=&quot;fa fa-address-book&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;myCV&#39;) %&gt; &lt;/div&gt; &lt;div id=&quot;articleContent&quot; data-aos=&quot;fade-up&quot;&gt; &lt;%- page.content %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 这样就会多出一张card，然后可以在/source/about/index.md下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。 2.4 数学公式渲染和代码高亮 2.4.1 解决mathjax与代码高亮的冲突 如果你按照教程安装了代码高亮插件hexo-prism-plugin，单独使用是没有问题的，但如果你又使用了mathjax，并且按照网上教程，安装kramed插件并修改了js文件里的正则表达式（为了解决markdown和mathjax的语法冲突），那你的代码就无法高亮了。解决方法很简单，别用kramed插件了，还用原来自带的marked插件，直接改它的正则表达式就行了。 2.4.2 加数学公式显示 打开/themes/matery/layout中的post.ejs文件，在最下方粘贴如下代码： &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt; 由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。 打开/node_modules/marked/lib中的marked.js文件，第539行的escape:处替换成： escape: /^$[`*\\[\\]()#$+\\-.!_&gt;])/ 第553行的em:处替换成： em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/ 这时在文章里写数学公式基本没有问题了，但是要注意：数学公式中如果出现了连续两个{，中间一定要加空格！ 举个例子:行内公式：$y = f(x)$代码： $y = f(x)$ 行间公式：\\[y = {f_{ {g_1}}}(x)\\]代码： \\\\[y = {f_{ {g_1}}}(x)\\\\] 注意上面花括号之间有空格！ 2.5 增加建站时间 修改/themes/matery/layout/_partial中的footer.ejs，在最后加上： &lt;script language=javascript&gt; function siteTime() { window.setTimeout(&quot;siteTime()&quot;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth() + 1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00 var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond); var diff = t2 - t1; var diffYears = Math.floor(diff / years); var diffDays = Math.floor((diff / days) - diffYears * 365); var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours); var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes); var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds); document.getElementById(&quot;sitetime&quot;).innerHTML = &quot;本站已运行 &quot; +diffYears+&quot; 年 &quot;+diffDays + &quot; 天 &quot; + diffHours + &quot; 小时 &quot; + diffMinutes + &quot; 分钟 &quot; + diffSeconds + &quot; 秒&quot;; }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/ siteTime(); &lt;/script&gt; 然后在合适的地方（比如copyright声明后面）加上下面的代码就行了： &lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt; 2.6 修改不蒜子初始化计数 因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，我们在/themes/matery/layout/_partial里的footer.ejs文件最后加上： &lt;script&gt; $(document).ready(function () { var int = setInterval(fixCount, 50); // 50ms周期检测函数 var pvcountOffset = 80000; // 初始化首次数据 var uvcountOffset = 20000; function fixCount() { if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;) { $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + pvcountOffset); clearInterval(int); } if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;) { $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + uvcountOffset); // 加上初始数据 clearInterval(int); // 停止检测 } } }); &lt;/script&gt; 然后把上面几行有段代码： &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; &lt;/span&gt; &lt;% } %&gt; &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人. &lt;/span&gt; &lt;% } %&gt; 修改为： &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt; &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; &lt;/span&gt; &lt;% } %&gt; &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt; 人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人. &lt;/span&gt; &lt;% } %&gt; 其实就是增加了两个style=&#39;display:none&#39;而已。 2.7 添加动漫人物 其实三步就行了，不用像网上有些教程那么复杂。 第一步： npm install --save hexo-helper-live2d 第二步： npm install live2d-widget-model-shizuku 这里的动漫模型可以改，只需要下载对应模型就行了，你可以官方仓库去看有哪些模型，下载你喜欢的就行。 第三步：在根目录配置文件中添加如下代码： live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-shizuku display: position: right width: 150 height: 300 mobile: show: false react: opacity: 0.7 然后hexo g再hexo s就能预览出效果了，但是有个注意的地方，这个动漫人物最好不要和不蒜子同时使用，不然不蒜子会显示不出来。至于解决办法后续更新。 解决动漫人物和不蒜子不能同时使用的bug（2019.08.11）： 打开themes\\matery\\layout\\_partial中的footer.ejs，将本站总访问量和访客数的代码改为如下： &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt; &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; &lt;% } %&gt; &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt; 人次,&amp;nbsp;访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人. &lt;% } %&gt; 变化就在下面两句，将源代码对应字段后面的＜/span＞写在前面了。 &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt; 发现按照上面改了过后，又出现一个新bug：文章头部的阅读次数不显示了，解决办法：（2019.08.11）： 打开themes\\matery\\layout\\_partial中的post-detail.ejs，找到对应代码字段： &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.enable) { %&gt; &lt;div id=&quot;busuanzi_container_page_pv&quot; class=&quot;info-break-policy&quot;&gt; &lt;i class=&quot;fa fa-eye fa-fw&quot;&gt;&lt;/i&gt;&lt;%- __(&#39;readCount&#39;) %&gt;:&amp;nbsp;&amp;nbsp; &lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt; &lt;/div&gt; &lt;% } %&gt; 修改为下面的就可以了： &lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.enable) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot; style=&#39;display:none&#39;&gt;&lt;/span&gt; &lt;i class=&quot;fa fa-eye fa-fw&quot;&gt;&lt;/i&gt;&lt;%- __(&#39;readCount&#39;) %&gt;:&amp;nbsp;&amp;nbsp; &lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt; &lt;% } %&gt; 2.8 添加评论插件 由于这个主题自带了gittalk、gitment、valine等评论插件，所以我们只需要对应插件参数就行了，这个博客用的是gittalk，如下：当然也可以用其他评论插件，只需要配置对应项就是了，不是自带的可以照着网上的教程自己弄一个，类似的文章有很多，可以搜索关键字就行了。 2.9 添加网易云音乐BGM 写文章的时候，想插入一段BGM怎么办？ 其实我们可以借助一些在线音乐的外链播放方式，首先打开网易云网页版，找到想听的歌曲，然后点击生成外链： 可能你会遇到问题，比如点击生成外链会提示你由于版权原因，不能生成，那么可以用下面办法(目前还有效，不知道后面会不会失效) (以 Chrome为例，其他浏览器类似) 打开歌单页面，在“生成外链播放器”上右击，点击审查元素（检查）ctrl+shift+i； 接着找到生成外链播放器这段文字直接双击复制前面的/outchain/2/20707408/ 然后在浏览器地址栏修改歌单链接，示例：http://music.163.com/#//outchain/2/20707408/ 然后就转到外链设置页面了。 复制如下代码： 粘贴到文章对应位置就行了，为了美观，设置一下居中，具体代码如下： &lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt; 2.10 博客音乐板块 如果我们自己写博客写疲劳了，想放松一下听听歌又不想切出博客主页，那么我们可以自己定制一个博客音乐播放界面，把自己喜欢的歌曲都放进来，这里用到是Aplayer插件，但是歌曲来源需要我们自己定义，但是，因为各大音乐平台，由于版权原因，很多歌曲是不支持外链播放的，难道我们就必须每首歌下载然后上传云空间，再获取词曲封面么？这就比较麻烦了。其实不然，研究了半个小时，我发现可以采取下面的办法，很方便： 首先我们找到网易云在线平台，任意找到一首歌点进去播放，可以在地址栏拿到音乐ID号 然后通过下面网址：http://music.163.com/song/media/outer/url?id=XXXXXX.mp3， XXXXXX就是歌曲ID号，每一首歌我们只需要换掉这个ID号就行了,就相当于每一首的外链了 最后封面图也可以按F12去找页面元素的链接，填到对应的musics.jason文件中就可以，批量填入，听到好听的歌曲随时更换随时新增，很方便。 操作如下图： 2.11 增加emoji支持 为博客新增对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile: :smile:）转变成会跳跃的emoji表情，安装命令如下： npm install hexo-filter-github-emojis --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。如下图： 第三部分 优化 hexo添加各种优化功能，比如SEO优化等。待续…… 1. 网站SEO优化 网站推广是一个比较烦人的事情，特别是对于专心搞技术的来说，可能就不是很擅长，那么怎么才能让别人知道我们网站呢？也就是说我们需要想办法让别人通过搜索就可以搜索到博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好 SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 1.1 让百度收录你的站点 首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入site:&lt;域名&gt;,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站 1.1.1 验证网站所有权 登录百度站长搜索资源平台：http://zhanzhang.baidu.com， 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址。 注意，这里需要输入我们自己购买的域名,不能使用xxx.github.io之类域名.因为github是不允许百度的spider（蜘蛛）爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名 在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种： 文件验证。 html标签验证 CNAME解析验证（推荐使用） 其实使用哪一种方式都可以，都是比较简单的。 但是一定要注意，使用文件验证文件存放的位置需要放在sourc文件夹下，如果是html文件那么hexo就会将其编译，所以必须要在html头部加上的layout:false，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要） 其他两种方式也是很简单的，个人推荐文件验证和CNAME验证，CNAME验证最为简单，只需加一条解析就好~ 1.1.2 生成网站地图 我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎 1.1.2.1 安装sitemap插件 npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 1.1.2.2 修改博客配置文件 在根目录配置文件.yml中修改url为你的站点地址 # URL ## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39; # url: https://shw2018.github.io/ url: https://sunhwee.com root: / permalink: :year/:month/:day/:title/ permalink_defaults: 执行完hexo g命令之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件，可以通过：https://sunhwee.com/baidusitemap.xml, 查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。 1.1.3 向百度提交链接 然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap 如何选择链接提交方式 主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。 自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。 sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。 手动提交：一次性提交链接给百度，可以使用此种方式。 一般主动提交比手动提交效果好，这里介绍主动提交的三种方法 从效率上来说： 主动推送&gt;自动推送&gt;sitemap 1.1.3.1 设置主动推送 安装插件hexo-baidu-url-submit npm install hexo-baidu-url-submit --save 然后再根目录的配置文件中新增字段 baidu_url_submit: count: 80 # 提交最新的一个链接 host: www.sunhwee.com # 在百度站长平台中注册的域名 token: xxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里 再加入新的deploy： deploy: - type: baidu_url_submitter 如图所示： 注意,这里多个 type 的写法应该这么写**,前面那个 type 是我推送到 Github 与 Coding的page页面的配置,后面再讲这个。 密钥的获取位置在网页抓取中的链接提交这一块,如下所示: 这样执行hexo deploy的时候，新的链接就会被推送了。 推送成功时,会有如下终端提示 各种不同的推送反馈字段说明在这里查看,一般来说,推送失败基本都是地址不相符造成的,我们只需对比baidu_url_submit在public中生成的baidu_urls.txt的地址,与自己填写在host字段中的地址对比看是否一样即可。 1.1.3.2 设置自动推送 在主题配置文件下设置,将baidu_push设置为true： # Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO baidu_push: true 然后主题文件目录加入下面代码，一般在目录/themes/matery/layout/_partial中的head.ejs中加入下面JS代码（有可能你的目录不是这样，原理类似），这样全站都有了： &lt;% if (theme.baidu_push) { %&gt; &lt;script&gt; (function(){ var bp = document.createElement(&#39;script&#39;); var curProtocol = window.location.protocol.split(&#39;:&#39;)[0]; if (curProtocol === &#39;https&#39;) { bp.src = &#39;https://zz.bdstatic.com/linksubmit/push.js&#39;; } else { bp.src = &#39;http://push.zhanzhang.baidu.com/push.js&#39;; } var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(bp, s); })(); &lt;/script&gt; &lt;% } %&gt; 这样每次访问博客中的页面就会自动向百度提交sitemap 1.1.3.3 sitemap方式 将我们上一步生成的sitemap文件提交到百度就可以了~我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果在百度搜索site:sunhwee.com已经可以搜索到结果在搜索框输入域名也可以找到站点输入关键字的名字也可以在第二页就找到呢，好开森~ 1.2 让google收录你的站点 1.2.1 操作步骤相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的。 google站点平台：https://www.google.com/webmasters/ 注册账号 验证站点 提交sitemap 向 google 添加 sitemap 后: 进入 Google Search Console - 抓取 - 站点地图,点击「添加/测试站点地图」,输入你的博客网址. 若无报错则站点地图提交成功 一步一步来就好，过不了过久就可以被google收录了 1.2.2 提交 robots.txt:robots.txt 是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt 放在博客目录下的 source 文件夹中，博客生成后在站点目录 /public/ 下。 我的 robots.txt 文件内容如下： User-agent: * Allow: / Allow: /archives/ Allow: /categories/ Allow: /about/ Disallow: /js/ Disallow: /css/ Disallow: /fonts/ Disallow: /vendors/ robots.txt 文件更新至网站后可进入 Google Search Console - 抓取 - robots.txt 测试工具进行测试。 这里部分参考自Hexo博客搜索 SEO优化-谷歌篇 1.3 让其他搜索引擎收录你的站点 除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的，大家就自行选择添加哈，这里就不再赘述了~ 1.4 优化你的url seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下： url: http://sunhwee.com root: / permalink: :title.html permalink_defaults: 1.5 其他seo优化 seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述 在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so…. 网站外链的推广度、数量和质量 网站的内链足够强大 网站的原创质量 网站的年龄时间 网站的更新频率（更新次数越多越好） 网站的服务器 网站的流量：流量越高网站的权重越高 网站的关键词排名：关键词排名越靠前，网站的权重越高 网站的收录数量：网站百度收录数量越多，网站百度权重越高 网站的浏览量及深度：用户体验越好，网站的百度权重越高 2. 优化代码块样式 由于代码高亮插件prism_plugin的样式没有行号显示和代码块整体复制功能，不是很方便，为了优化观感和易用性，我们可以对其进行修改：待续…… 2.1 给代码块开启行号 我们在配置文件.yml中找到prism_plugin配置项line_number: false（# default false）改为true，开启行号，但是在我们这个matery主题中中是无效的，有bug需要改一下matery.css样式参数,在第95行位置将： pre { padding: 1.5rem !important; margin: 1rem 0 !important; background: #272822; overflow: auto; border-radius: 0.35rem; tab-size: 4; } 改为： pre { padding: 1.5rem 1.5rem 1.5rem 3.3rem !important; margin: 1rem 0 !important; background: #272822; overflow: auto; border-radius: 0.35rem; tab-size: 4; } 注释掉紧接着的code代码块里面的font-size项，如下： code { padding: 1px 5px; font-family: Inconsolata, Monaco, Consolas, &#39;Courier New&#39;, Courier, monospace; /*font-size: 0.91rem;*/ color: #e96900; background-color: #f8f8f8; border-radius: 2px; } 好了这下可以显示行号了，如图： 2.2 添加代码块复制功能 3. 优化网站加载速度 3.1 优化图片加载 issue问题：优化网站加载逻辑问题：图片最后加载，加入图片懒加载方法（待测试） hexo-lazyload-image的作用原理是讲你博客里面img标签的src属性替换为一个loading image，把真实的图片地址放在data-origin属性下面。然后当你的网页翻到那张图片时（也就是图片在窗口中完全可见时），他会有一段js用data-origin的内容替换src，打到懒加载的目的。 一般情况下懒加载和gallery插件会发生冲突，比如按照我上面所说，最终结果就会变成，可能只有第一张图片在gallery中打开是原图，右翻左翻都会是那张loading image，需要你掌握js，可以修改matery.js里面的内容，甚至可能换一个gallery，比如photosiwpe之类的 解决方法：修改/themes/matery/source/js中的matery.js文件 第103行： $(&#39;#articleContent, #myGallery&#39;).lightGallery({ selector: &#39;.img-item&#39;, // 启用字幕 subHtmlSelectorRelative: true, showThumbByDefault: false //这句加上 }); 后面加上： $(document).find(&#39;img[data-original]&#39;).each(function(){ $(this).parent().attr(&quot;href&quot;, $(this).attr(&quot;data-original&quot;)); }); 再装个插件，https://github.com/Troy-Yang/hexo-lazyload-image 3. 一些注意事项 3.1 备份博客源文件 有时候我们想换一台电脑继续写博客，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。不过，这种方法有个问题就是要是那天电脑崩了，本地源文件丢失了，比较麻烦，所以这时候就可以将博客目录下的所有源文件都上传到github上面。 首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。 然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m &quot;xxx&quot;，最后git push origin hexo提交就行了。 具体效果可以看我的博客源文件仓库：传送门。 大家也可以先用下文hexo安装方法安装完hexo，然后直接git clone -b hexo https://github.com/shw2018/shw2018.github.io.git克隆我的所有源文件，这是我目前修改完的基本没bug的定制化的博客，可以直接拿来用。 持续更新中…，如果遇到问题欢迎联系我，一起讨论。 参考： Blinkfox godweiyang sunshine小小倩 一月筠 王辉的博客","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://sunhwee.github.io/tags/Github/"},{"name":"Tutorial","slug":"Tutorial","permalink":"https://sunhwee.github.io/tags/Tutorial/"},{"name":"Hexo","slug":"Hexo","permalink":"https://sunhwee.github.io/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://sunhwee.github.io/tags/博客/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"常用软件推荐","slug":"常用软件推荐","date":"2019-08-06T14:35:36.000Z","updated":"2019-08-21T11:24:47.876Z","comments":true,"path":"2019/08/06/常用软件推荐/","link":"","permalink":"https://sunhwee.github.io/2019/08/06/常用软件推荐/","excerpt":"","text":"复选框 复选框 Windows软件 windows上的软件数不胜数,同一类型的软件众多。到底哪一款才是适合你自己的，只有自己亲自试用过才知道。以下是我比较喜欢的软件，特别推荐给各位。 1.下载工具：qBittorrent和Internet Download Manager 2.聊天软件：tim(虽然已经被腾讯放弃了，但是比起QQ那么臃肿，这个好用点）和 微信(store转製版） 3.截图软件：snipaste 这个必须推荐 4.编辑器： vscode 5.浏览器： chrome 6.视频播放器： potplayer 和 哔哩哔哩UWP 7.词典： 欧陆词典 和 GoldenDict 8.笔记：onenote 和 evernote (用这个截取网页的内容，onenote的web clipper太差） 9.简单视频製作：Adobe Premiere Pro (编辑视频） 4K Video Downloader（下载视频） Aegisub (製作字幕） Megui(压制视频） 10.搜索： everything 11.图片查看： FastStone Image Viewer 12.压缩软件：winrar (7zip也不错，但是不能设置解压完自动打开解压的文件夹，只能放弃） 13.清理软件： Wise Care 365 和 CCleaner Linux软件 Linux平台上的软件也很多,比较实用的推荐给大家 1.图床上传软件：PicGo（一个简单而美观的跨平台图床管理工具 | 使用教程&gt;&gt;&gt;洪卫的博客） 2.文件传输工具：Dukto(超级实用的免费跨平台局域网文件/文件夹传输工具！实现手机和电脑之间互传) 3.编辑器： vscode(不用说都懂，美滋滋！) 4.浏览器： chrome MacosX软件 OSX系统的软件比较少 1.gif制作工具：PicGIF（方便的制作 gif 的及其轻量的小软件，本文的 gif 就是使用该软件制作） 2.桌面管理工具：Bartender （Mac下菜单栏管理应用，可以让菜单栏上杂乱无章的图标，变得井井有条）","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"Software","slug":"Software","permalink":"https://sunhwee.github.io/tags/Software/"},{"name":"常用软件","slug":"常用软件","permalink":"https://sunhwee.github.io/tags/常用软件/"},{"name":"Windows","slug":"Windows","permalink":"https://sunhwee.github.io/tags/Windows/"},{"name":"Linux","slug":"Linux","permalink":"https://sunhwee.github.io/tags/Linux/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2019-08-21T11:10:41.040Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"https://sunhwee.github.io/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"https://sunhwee.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://sunhwee.github.io/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://sunhwee.github.io/categories/技术/"}]}]}